---
// Copy Page Menu Component
// Provides options to copy content, view as markdown, and open in AI assistants

export interface Props {
  postTitle?: string;
  postContent?: string;
  postUrl?: string;
  className?: string;
}

const {
  postTitle = '',
  postContent = '',
  postUrl = '',
  className = ''
} = Astro.props;
---

<div class={`copy-page-menu ${className}`}>
  <div class="copy-page-dropdown">
    <button class="copy-page-btn" id="copy-page-btn" aria-label="Copy page options">
      <div class="flex items-center gap-2">
        <svg class="copy-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"/>
        </svg>
        <span class="copy-text">Copy page</span>
      </div>
      <svg class="dropdown-arrow" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
      </svg>
    </button>

    <div class="copy-page-menu-content" id="copy-page-menu-content">
      <div class="menu-item" data-action="copy-link">
        <svg class="menu-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"/>
        </svg>
        <div class="menu-text">
          <div class="menu-title">Copy page link</div>
          <div class="menu-description">Copy the current page URL to clipboard</div>
        </div>
      </div>

      <div class="menu-item" data-action="copy-content">
        <svg class="menu-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/>
        </svg>
        <div class="menu-text">
          <div class="menu-title">Copy entire content</div>
          <div class="menu-description">Copy the full article content to clipboard</div>
        </div>
      </div>

      <div class="menu-item" data-action="view-markdown">
        <svg class="menu-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
        </svg>
        <div class="menu-text">
          <div class="menu-title">View Page as Markdown</div>
          <div class="menu-description">Open the Markdown file in a new tab</div>
        </div>
      </div>

      <div class="menu-divider"></div>

      <div class="menu-item" data-action="open-claude">
        <svg class="menu-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
        </svg>
        <div class="menu-text">
          <div class="menu-title">Open in Claude</div>
          <div class="menu-description">Ask Claude about this page</div>
        </div>
      </div>

      <div class="menu-item" data-action="open-chatgpt">
        <svg class="menu-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"/>
        </svg>
        <div class="menu-text">
          <div class="menu-title">Open in ChatGPT</div>
          <div class="menu-description">Ask ChatGPT about this page</div>
        </div>
      </div>

      <div class="menu-item disabled" data-action="ask-ai-assistant">
        <svg class="menu-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
        </svg>
        <div class="menu-text">
          <div class="menu-title">Ask AI Chat Assistant</div>
          <div class="menu-description">Open our AI assistant (coming soon)</div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  class CopyPageMenu {
    private copyBtn: HTMLButtonElement | null = null;
    private menuContent: HTMLDivElement | null = null;
    private isOpen: boolean = false;

    constructor() {
      this.initializeElements();
      this.bindEvents();
    }

    private initializeElements(): void {
      this.copyBtn = document.getElementById('copy-page-btn') as HTMLButtonElement;
      this.menuContent = document.getElementById('copy-page-menu-content') as HTMLDivElement;
    }

    private bindEvents(): void {
      if (!this.copyBtn || !this.menuContent) return;

      // Toggle menu on button click
      this.copyBtn.addEventListener('click', (e) => {
        e.stopPropagation();
        this.toggleMenu();
      });

      // Close menu when clicking outside
      document.addEventListener('click', (e) => {
        const target = e.target as Node;
        const isClickInsideMenu = this.menuContent?.contains(target);
        const isClickInsideButton = this.copyBtn?.contains(target);
        
        if (!isClickInsideMenu && !isClickInsideButton) {
          this.closeMenu();
        }
      });

      // Handle menu item clicks
      this.menuContent.addEventListener('click', (e) => {
        const menuItem = (e.target as HTMLElement).closest('.menu-item') as HTMLElement;
        if (!menuItem) return;

        const action = menuItem.dataset.action;
        if (action && !menuItem.classList.contains('disabled')) {
          this.handleAction(action);
          this.closeMenu();
        }
      });

      // Close menu on escape key
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && this.isOpen) {
          this.closeMenu();
        }
      });
    }

    private toggleMenu(): void {
      if (this.isOpen) {
        this.closeMenu();
      } else {
        this.openMenu();
      }
    }

    private openMenu(): void {
      if (!this.menuContent || !this.copyBtn) return;

      this.menuContent.classList.add('open');
      this.copyBtn.classList.add('active');
      this.isOpen = true;

      // Add animation
      requestAnimationFrame(() => {
        this.menuContent?.classList.add('animate-in');
      });
    }

    private closeMenu(): void {
      if (!this.menuContent || !this.copyBtn) return;

      this.menuContent.classList.remove('open', 'animate-in');
      this.copyBtn.classList.remove('active');
      this.isOpen = false;
    }

    private async handleAction(action: string): Promise<void> {
      switch (action) {
        case 'copy-link':
          await this.copyPageLink();
          break;
        case 'copy-content':
          await this.copyEntireContent();
          break;
        case 'view-markdown':
          this.viewAsMarkdown();
          break;
        case 'open-claude':
          this.openInClaude();
          break;
        case 'open-chatgpt':
          this.openInChatGPT();
          break;
        case 'ask-ai-assistant':
          this.showComingSoon();
          break;
      }
    }

    private async copyPageLink(): Promise<void> {
      try {
        const url = window.location.href;
        await navigator.clipboard.writeText(url);
        this.showFeedback('Page link copied to clipboard!');
      } catch (error) {
        console.error('Failed to copy page link:', error);
        this.showFeedback('Failed to copy link', 'error');
      }
    }

    private async copyEntireContent(): Promise<void> {
      try {
        const content = this.extractArticleContent();
        await navigator.clipboard.writeText(content);
        this.showFeedback('Article content copied to clipboard!');
      } catch (error) {
        console.error('Failed to copy content:', error);
        this.showFeedback('Failed to copy content', 'error');
      }
    }

    private extractArticleContent(): string {
      const title = document.querySelector('h1')?.textContent || '';
      const content = document.querySelector('.blog-content') || document.querySelector('.prose');
      
      if (!content) {
        throw new Error('Article content not found');
      }

      // Extract text content and format it
      const textContent = content.textContent || '';
      const formattedContent = `${title}\n\n${textContent.trim()}`;
      
      return formattedContent;
    }

    private viewAsMarkdown(): void {
      // For now, we'll copy the content as markdown-like text
      // In a real implementation, you might want to fetch the actual markdown file
      const content = this.extractArticleContent();
      const markdownContent = this.convertToMarkdown(content);
      
      // Create a blob and open in new tab
      const blob = new Blob([markdownContent], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      window.open(url, '_blank');
      
      // Clean up the URL after a delay
      setTimeout(() => URL.revokeObjectURL(url), 1000);
    }

    private convertToMarkdown(content: string): string {
      // Simple markdown conversion
      const lines = content.split('\n');
      const markdownLines = lines.map(line => {
        const trimmed = line.trim();
        if (!trimmed) return '';
        
        // Convert headings (basic detection)
        if (trimmed.length < 50 && !trimmed.includes('.')) {
          return `## ${trimmed}`;
        }
        
        return trimmed;
      });
      
      return markdownLines.join('\n');
    }

    private openInClaude(): void {
      const url = window.location.href;
      const claudeUrl = `https://claude.ai/chat?url=${encodeURIComponent(url)}`;
      window.open(claudeUrl, '_blank');
    }

    private openInChatGPT(): void {
      const url = window.location.href;
      const chatgptUrl = `https://chat.openai.com/?url=${encodeURIComponent(url)}`;
      window.open(chatgptUrl, '_blank');
    }

    private showComingSoon(): void {
      this.showFeedback('AI Chat Assistant coming soon!', 'info');
    }

    private showFeedback(message: string, type: 'success' | 'error' | 'info' = 'success'): void {
      // Create feedback element
      const feedback = document.createElement('div');
      feedback.className = `copy-feedback copy-feedback-${type}`;
      feedback.textContent = message;
      
      // Add to page
      document.body.appendChild(feedback);
      
      // Show feedback
      requestAnimationFrame(() => {
        feedback.classList.add('show');
      });
      
      // Remove after delay
      setTimeout(() => {
        feedback.classList.remove('show');
        setTimeout(() => {
          document.body.removeChild(feedback);
        }, 300);
      }, 3000);
    }
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new CopyPageMenu());
  } else {
    new CopyPageMenu();
  }
</script>

<style>
  @reference "@/styles/global.css";
  .copy-page-menu {
    @apply relative w-full;
  }

  .copy-page-dropdown {
    @apply relative w-full;
  }

  .copy-page-btn {
    @apply flex items-center justify-between gap-2 w-full px-3 py-3 text-sm font-medium text-neutral-600 bg-white border border-neutral-300 rounded-xl hover:bg-neutral-50 hover:text-neutral-800 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500 h-12;
  }

  .copy-page-btn.active {
    @apply bg-primary-50 text-primary-700 border-primary-300;
  }

  .copy-icon {
    @apply w-4 h-4;
  }

  .copy-text {
    @apply font-medium;
  }

  .dropdown-arrow {
    @apply w-4 h-4 transition-transform duration-200;
  }

  .copy-page-btn.active .dropdown-arrow {
    @apply rotate-180;
  }

  .copy-page-menu-content {
    @apply absolute left-0 top-full mt-2 w-80 bg-white border border-neutral-200 rounded-lg shadow-xl z-50 opacity-0 invisible transition-all duration-200 transform scale-95;
  }

  .copy-page-menu-content.open {
    @apply opacity-100 visible scale-100;
  }

  .copy-page-menu-content.animate-in {
    @apply animate-fade-in duration-200;
  }

  .menu-item {
    @apply flex items-start gap-3 p-4 hover:bg-neutral-50 cursor-pointer transition-colors duration-150 first:rounded-t-lg last:rounded-b-lg;
  }

  .menu-item.disabled {
    @apply opacity-50 cursor-not-allowed hover:bg-transparent;
  }

  .menu-item:not(.disabled):hover {
    @apply bg-neutral-50;
  }

  .menu-icon {
    @apply w-5 h-5 text-neutral-500 shrink-0 mt-0.5;
  }

  .menu-item:not(.disabled):hover .menu-icon {
    @apply text-primary-600;
  }

  .menu-text {
    @apply flex-1 min-w-0;
  }

  .menu-title {
    @apply text-sm font-medium text-neutral-800 mb-1;
  }

  .menu-description {
    @apply text-xs text-neutral-500;
  }

  .menu-item:not(.disabled):hover .menu-title {
    @apply text-primary-700;
  }

  .menu-divider {
    @apply border-t border-neutral-200 my-2;
  }

  /* Feedback styles */
  .copy-feedback {
    @apply fixed top-4 right-4 px-4 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform duration-300;
  }

  .copy-feedback.show {
    @apply translate-x-0;
  }

  .copy-feedback-success {
    @apply bg-green-500 text-white;
  }

  .copy-feedback-error {
    @apply bg-red-500 text-white;
  }

  .copy-feedback-info {
    @apply bg-blue-500 text-white;
  }

  /* Dark mode styles */
  .dark .copy-page-btn {
    @apply bg-neutral-800 text-neutral-300 border-neutral-700 hover:bg-neutral-700 hover:text-neutral-100;
  }

  .dark .copy-page-btn.active {
    @apply bg-primary-900 text-primary-300 border-primary-700;
  }

  .dark .copy-page-menu-content {
    @apply bg-neutral-800 border-neutral-700;
  }

  .dark .menu-item {
    @apply hover:bg-neutral-700;
  }

  .dark .menu-item:not(.disabled):hover {
    @apply bg-neutral-700;
  }

  .dark .menu-icon {
    @apply text-neutral-400;
  }

  .dark .menu-item:not(.disabled):hover .menu-icon {
    @apply text-primary-400;
  }

  .dark .menu-title {
    @apply text-neutral-200;
  }

  .dark .menu-description {
    @apply text-neutral-400;
  }

  .dark .menu-item:not(.disabled):hover .menu-title {
    @apply text-primary-300;
  }

  .dark .menu-divider {
    @apply border-neutral-700;
  }

  /* Responsive styles */
  @media (max-width: 640px) {
    .copy-page-menu-content {
      @apply w-72 left-0;
    }
  }

  @media (max-width: 480px) {
    .copy-page-menu-content {
      @apply w-64 left-0;
    }
    
    .menu-item {
      @apply p-3;
    }
    
    .menu-title {
      @apply text-xs;
    }
    
    .menu-description {
      @apply text-xs;
    }
  }
</style>
