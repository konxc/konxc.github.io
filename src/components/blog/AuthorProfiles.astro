---
// Author Profiles Component
export interface Props {
  class?: string;
  authors?: Array<{
    id: string;
    name: string;
    bio: string;
    avatar: string;
    social: {
      twitter?: string;
      linkedin?: string;
      github?: string;
      website?: string;
    };
    expertise: string[];
    postsCount: number;
    joinedDate: string;
  }>;
}

const { 
  class: className,
  authors = [
    {
      id: 'konxc-team',
      name: 'Tim KonXC',
      bio: 'Tim teknologi KonXC yang berdedikasi untuk menyederhanakan teknologi bagi pertumbuhan bisnis. Berpengalaman dalam IT Support, Software Development, dan Digital Transformation.',
      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=konxc-team&backgroundColor=FF9800&textColor=FFFFFF',
      social: {
        linkedin: 'https://www.linkedin.com/company/konxc',
        website: 'https://konxc.space'
      },
      expertise: ['IT Support', 'Software Development', 'Digital Transformation', 'Cloud Solutions'],
      postsCount: 2,
      joinedDate: '2024-01-01'
    },
    {
      id: 'ahmad-rizki',
      name: 'Ahmad Rizki',
      bio: 'Frontend Developer dengan passion untuk modern web technologies. Spesialisasi dalam React, Vue.js, dan Astro framework.',
      avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=ahmad-rizki&backgroundColor=0D8ABC&textColor=FFFFFF',
      social: {
        twitter: 'https://twitter.com/ahmadrizki',
        github: 'https://github.com/ahmadrizki',
        linkedin: 'https://linkedin.com/in/ahmadrizki'
      },
      expertise: ['Frontend Development', 'React', 'Vue.js', 'Astro', 'TypeScript'],
      postsCount: 1,
      joinedDate: '2024-01-15'
    }
  ]
} = Astro.props;
---

<div class={`author-profiles ${className || ''}`}>
  <div class="profiles-header">
    <h3 class="profiles-title">
      ðŸ‘¥ Tim Penulis
    </h3>
    <p class="profiles-subtitle">Kenali tim KonXC yang menulis artikel-artikel berkualitas untuk Anda</p>
  </div>

  <div class="profiles-grid">
    {authors.map((author) => (
      <div class="author-card" data-author-id={author.id}>
        <div class="author-header">
          <div class="author-avatar">
            <img 
              src={author.avatar} 
              alt={`Avatar ${author.name}`}
              class="avatar-image"
              onerror="this.src='https://api.dicebear.com/7.x/avataaars/svg?seed=default&backgroundColor=9E9E9E&textColor=FFFFFF'"
            />
            <div class="avatar-status"></div>
          </div>
          
          <div class="author-info">
            <h4 class="author-name">{author.name}</h4>
            <p class="author-bio">{author.bio}</p>
            
            <div class="author-stats">
              <div class="stat-item">
                <span class="stat-number">{author.postsCount}</span>
                <span class="stat-label">Artikel</span>
              </div>
              <div class="stat-item">
                <span class="stat-number">{new Date(author.joinedDate).getFullYear()}</span>
                <span class="stat-label">Bergabung</span>
              </div>
            </div>
          </div>
        </div>

        <div class="author-expertise">
          <h5 class="expertise-title">Keahlian</h5>
          <div class="expertise-tags">
            {author.expertise.map((skill) => (
              <span class="expertise-tag">{skill}</span>
            ))}
          </div>
        </div>

        <div class="author-social">
          <h5 class="social-title">Koneksi Sosial</h5>
          <div class="social-links">
            {author.social.twitter && (
              <a href={author.social.twitter} target="_blank" rel="noopener noreferrer" class="social-link twitter">
                <svg class="social-icon" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M23.953 4.57a10 10 0 01-2.825.775 4.958 4.958 0 002.163-2.723c-.951.555-2.005.959-3.127 1.184a4.92 4.92 0 00-8.384 4.482C7.69 8.095 4.067 6.13 1.64 3.162a4.822 4.822 0 00-.666 2.475c0 1.71.87 3.213 2.188 4.096a4.904 4.904 0 01-2.228-.616v.06a4.923 4.923 0 003.946 4.827 4.996 4.996 0 01-2.212.085 4.936 4.936 0 004.604 3.417 9.867 9.867 0 01-6.102 2.105c-.39 0-.779-.023-1.17-.067a13.995 13.995 0 007.557 2.209c9.053 0 13.998-7.496 13.998-13.985 0-.21 0-.42-.015-.63A9.935 9.935 0 0024 4.59z"/>
                </svg>
                Twitter
              </a>
            )}
            {author.social.linkedin && (
              <a href={author.social.linkedin} target="_blank" rel="noopener noreferrer" class="social-link linkedin">
                <svg class="social-icon" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
                </svg>
                LinkedIn
              </a>
            )}
            {author.social.github && (
              <a href={author.social.github} target="_blank" rel="noopener noreferrer" class="social-link github">
                <svg class="social-icon" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/>
                </svg>
                GitHub
              </a>
            )}
            {author.social.website && (
              <a href={author.social.website} target="_blank" rel="noopener noreferrer" class="social-link website">
                <svg class="social-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9v-9m0-9v9"/>
                </svg>
                Website
              </a>
            )}
          </div>
        </div>

        <div class="author-actions">
          <button class="action-btn follow-btn" data-author-id={author.id}>
            <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
            </svg>
            Follow
          </button>
          <button class="action-btn message-btn" data-author-id={author.id}>
            <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"/>
            </svg>
            Message
          </button>
        </div>
      </div>
    ))}
  </div>

  <!-- Author Posts Summary -->
  <div class="authors-summary">
    <h4 class="summary-title">Ringkasan Kontribusi</h4>
    <div class="summary-stats">
      <div class="summary-item">
        <span class="summary-number">{authors.reduce((sum, author) => sum + author.postsCount, 0)}</span>
        <span class="summary-label">Total Artikel</span>
      </div>
      <div class="summary-item">
        <span class="summary-number">{authors.length}</span>
        <span class="summary-label">Penulis Aktif</span>
      </div>
      <div class="summary-item">
        <span class="summary-number">{new Set(authors.flatMap(author => author.expertise)).size}</span>
        <span class="summary-label">Bidang Keahlian</span>
      </div>
    </div>
  </div>
</div>

<script>
  class AuthorProfiles {
    private authors: any[] = [];

    constructor() {
      this.initializeAuthors();
      this.setupEventListeners();
    }

    private initializeAuthors(): void {
      this.authors = Array.from(document.querySelectorAll('.author-card')).map(card => ({
        id: card.getAttribute('data-author-id'),
        element: card
      }));
    }

    private setupEventListeners(): void {
      // Follow buttons
      document.querySelectorAll('.follow-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const button = target.closest('.follow-btn') as HTMLButtonElement;
          const authorId = button.getAttribute('data-author-id');
          this.handleFollow(authorId!);
        });
      });

      // Message buttons
      document.querySelectorAll('.message-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const button = target.closest('.message-btn') as HTMLButtonElement;
          const authorId = button.getAttribute('data-author-id');
          this.handleMessage(authorId!);
        });
      });

      // Social links tracking
      document.querySelectorAll('.social-link').forEach(link => {
        link.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const linkElement = target.closest('.social-link') as HTMLAnchorElement;
          this.trackSocialClick(linkElement);
        });
      });
    }

    private handleFollow(authorId: string): void {
      const followBtn = document.querySelector(`[data-author-id="${authorId}"] .follow-btn`) as HTMLButtonElement;
      
      if (followBtn) {
        const isFollowing = followBtn.classList.contains('following');
        
        if (isFollowing) {
          followBtn.classList.remove('following');
          followBtn.innerHTML = `
            <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z"/>
            </svg>
            Follow
          `;
          this.showMessage('Berhenti mengikuti penulis', 'info');
        } else {
          followBtn.classList.add('following');
          followBtn.innerHTML = `
            <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
            </svg>
            Following
          `;
          this.showMessage('Berhasil mengikuti penulis!', 'success');
        }
        
        this.trackEvent('author_follow', { authorId, action: isFollowing ? 'unfollow' : 'follow' });
      }
    }

    private handleMessage(authorId: string): void {
      // In a real implementation, this would open a messaging interface
      this.showMessage('Fitur messaging akan segera hadir!', 'info');
      this.trackEvent('author_message', { authorId });
    }

    private trackSocialClick(link: HTMLAnchorElement): void {
      const platform = link.classList.contains('twitter') ? 'twitter' :
                      link.classList.contains('linkedin') ? 'linkedin' :
                      link.classList.contains('github') ? 'github' : 'website';
      
      this.trackEvent('author_social_click', { 
        platform, 
        url: link.href 
      });
    }

    private trackEvent(eventName: string, data: any): void {
      if (typeof window !== 'undefined' && window.gtag) {
        window.gtag('event', eventName, {
          event_category: 'author_profiles',
          ...data
        });
      }
    }

    private showMessage(message: string, type: 'success' | 'info' | 'error'): void {
      const messageDiv = document.createElement('div');
      messageDiv.className = `author-message author-message-${type}`;
      messageDiv.textContent = message;
      
      document.body.appendChild(messageDiv);
      
      setTimeout(() => {
        messageDiv.remove();
      }, 3000);
    }
  }

  // Initialize author profiles when DOM is ready
  function initAuthorProfiles(): void {
    new AuthorProfiles();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAuthorProfiles);
  } else {
    initAuthorProfiles();
  }
</script>

<style>
  @reference "@/styles/global.css";
  .author-profiles {
    @apply bg-white rounded-2xl p-6 shadow-lg border border-neutral-100;
  }

  .profiles-header {
    @apply mb-6;
  }

  .profiles-title {
    @apply text-2xl font-bold text-neutral-800 mb-2;
  }

  .profiles-subtitle {
    @apply text-neutral-600;
  }

  .profiles-grid {
    @apply grid md:grid-cols-2 gap-6 mb-8;
  }

  .author-card {
    @apply bg-gradient-to-br from-neutral-50 to-neutral-100 rounded-xl p-6 border border-neutral-200 hover:shadow-lg transition-all duration-300;
  }

  .author-header {
    @apply flex gap-4 mb-4;
  }

  .author-avatar {
    @apply relative flex-shrink-0;
  }

  .avatar-image {
    @apply w-16 h-16 rounded-full object-cover border-2 border-white shadow-sm;
  }

  .avatar-status {
    @apply absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white;
  }

  .author-info {
    @apply flex-1 min-w-0;
  }

  .author-name {
    @apply text-lg font-bold text-neutral-800 mb-1;
  }

  .author-bio {
    @apply text-sm text-neutral-600 mb-3 line-clamp-3;
  }

  .author-stats {
    @apply flex gap-4;
  }

  .stat-item {
    @apply text-center;
  }

  .stat-number {
    @apply block text-lg font-bold text-primary-600;
  }

  .stat-label {
    @apply block text-xs text-neutral-500;
  }

  .author-expertise {
    @apply mb-4;
  }

  .expertise-title {
    @apply text-sm font-semibold text-neutral-700 mb-2;
  }

  .expertise-tags {
    @apply flex flex-wrap gap-2;
  }

  .expertise-tag {
    @apply px-3 py-1 bg-primary-100 text-primary-700 rounded-full text-xs font-medium;
  }

  .author-social {
    @apply mb-4;
  }

  .social-title {
    @apply text-sm font-semibold text-neutral-700 mb-2;
  }

  .social-links {
    @apply flex flex-wrap gap-2;
  }

  .social-link {
    @apply flex items-center gap-2 px-3 py-2 bg-white border border-neutral-300 rounded-lg text-sm text-neutral-600 hover:bg-neutral-50 transition-colors;
  }

  .social-link.twitter:hover {
    @apply bg-blue-50 text-blue-600 border-blue-300;
  }

  .social-link.linkedin:hover {
    @apply bg-blue-50 text-blue-600 border-blue-300;
  }

  .social-link.github:hover {
    @apply bg-gray-50 text-gray-600 border-gray-300;
  }

  .social-link.website:hover {
    @apply bg-green-50 text-green-600 border-green-300;
  }

  .social-icon {
    @apply w-4 h-4;
  }

  .author-actions {
    @apply flex gap-3;
  }

  .action-btn {
    @apply flex items-center gap-2 px-4 py-2 bg-white border border-neutral-300 rounded-lg text-sm text-neutral-600 hover:bg-neutral-50 transition-colors;
  }

  .action-btn.following {
    @apply bg-primary-500 text-white border-primary-500 hover:bg-primary-600;
  }

  .action-icon {
    @apply w-4 h-4;
  }

  .authors-summary {
    @apply pt-6 border-t border-neutral-200;
  }

  .summary-title {
    @apply text-lg font-semibold text-neutral-800 mb-4;
  }

  .summary-stats {
    @apply grid grid-cols-3 gap-4;
  }

  .summary-item {
    @apply text-center p-4 bg-gradient-to-br from-primary-50 to-secondary-50 rounded-lg;
  }

  .summary-number {
    @apply block text-2xl font-bold text-primary-600;
  }

  .summary-label {
    @apply block text-sm text-neutral-600;
  }

  .author-message {
    @apply fixed top-4 right-4 px-4 py-2 rounded-lg text-white font-medium z-50;
  }

  .author-message-success {
    @apply bg-green-500;
  }

  .author-message-info {
    @apply bg-blue-500;
  }

  .author-message-error {
    @apply bg-red-500;
  }

  /* Dark mode styles */
  .dark .author-profiles {
    @apply bg-neutral-800 border-neutral-700;
  }

  .dark .author-card {
    @apply from-neutral-700 to-neutral-800 border-neutral-600;
  }

  .dark .author-name {
    @apply text-neutral-100;
  }

  .dark .author-bio {
    @apply text-neutral-400;
  }

  .dark .expertise-title,
  .dark .social-title {
    @apply text-neutral-300;
  }

  .dark .social-link {
    @apply bg-neutral-600 border-neutral-500 text-neutral-300;
  }

  .dark .action-btn {
    @apply bg-neutral-600 border-neutral-500 text-neutral-300;
  }

  .dark .summary-item {
    @apply from-primary-900 to-secondary-900;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .author-profiles {
      @apply p-4;
    }
    
    .profiles-grid {
      @apply grid-cols-1;
    }
    
    .author-header {
      @apply flex-col text-center;
    }
    
    .author-stats {
      @apply justify-center;
    }
    
    .summary-stats {
      @apply grid-cols-1 gap-3;
    }
    
    .author-actions {
      @apply flex-col;
    }
  }
</style>
