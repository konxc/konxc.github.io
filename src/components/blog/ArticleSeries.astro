---
// Article Series Component
import { getCollection } from 'astro:content';

const posts = await getCollection('blog');

// Group posts by series
const seriesMap: { [key: string]: any[] } = {};
posts.forEach(post => {
  if (post.data.series) {
    if (!seriesMap[post.data.series]) {
      seriesMap[post.data.series] = [];
    }
    seriesMap[post.data.series].push({
      ...post.data,
      slug: post.slug
    });
  }
});

// Sort posts within each series by seriesOrder
Object.keys(seriesMap).forEach(seriesName => {
  seriesMap[seriesName].sort((a, b) => {
    const orderA = a.seriesOrder || 0;
    const orderB = b.seriesOrder || 0;
    return orderA - orderB;
  });
});

export interface Props {
  class?: string;
  currentPostSlug?: string;
  showNavigation?: boolean;
  showProgress?: boolean;
}

const { 
  class: className, 
  currentPostSlug = '',
  showNavigation = true,
  showProgress = true
} = Astro.props;

// Find current post's series
let currentSeries: any[] = [];
let currentPostIndex = -1;
let currentSeriesName = '';

if (currentPostSlug) {
  const currentPost = posts.find(post => post.slug === currentPostSlug);
  if (currentPost?.data.series) {
    currentSeriesName = currentPost.data.series;
    currentSeries = seriesMap[currentSeriesName] || [];
    currentPostIndex = currentSeries.findIndex(post => post.slug === currentPostSlug);
  }
}

const hasSeries = currentSeries.length > 0;
---

{hasSeries && (
  <div class={`article-series ${className || ''}`}>
    <div class="series-header">
      <div class="series-info">
        <h3 class="series-title">ðŸ“š {currentSeriesName}</h3>
        <p class="series-description">Seri artikel: {currentSeries.length} bagian</p>
      </div>
      
      {showProgress && (
        <div class="series-progress">
          <div class="progress-bar">
            <div 
              class="progress-fill" 
              style={`width: ${((currentPostIndex + 1) / currentSeries.length) * 100}%`}
            ></div>
          </div>
          <span class="progress-text">
            {currentPostIndex + 1} dari {currentSeries.length}
          </span>
        </div>
      )}
    </div>

    {showNavigation && (
      <div class="series-navigation">
        <div class="series-posts">
          {currentSeries.map((post, index) => (
            <div class={`series-post ${index === currentPostIndex ? 'current' : ''} ${index < currentPostIndex ? 'completed' : ''}`}>
              <div class="post-number">
                {index < currentPostIndex ? (
                  <svg class="completed-icon" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
                  </svg>
                ) : (
                  <span class="number">{index + 1}</span>
                )}
              </div>
              
              <div class="post-content">
                <h4 class="post-title">
                  {index === currentPostIndex ? (
                    <span class="current-post">{post.title}</span>
                  ) : (
                    <a href={`/blog/${post.slug}`} class="post-link">{post.title}</a>
                  )}
                </h4>
                
                <div class="post-meta">
                  <span class="post-category">{post.category}</span>
                  {post.readingTime && (
                    <span class="post-reading-time">{post.readingTime} min</span>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
        
        <div class="series-controls">
          {currentPostIndex > 0 && (
            <a 
              href={`/blog/${currentSeries[currentPostIndex - 1].slug}`}
              class="series-nav-btn prev"
            >
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
              </svg>
              Sebelumnya
            </a>
          )}
          
          {currentPostIndex < currentSeries.length - 1 && (
            <a 
              href={`/blog/${currentSeries[currentPostIndex + 1].slug}`}
              class="series-nav-btn next"
            >
              Selanjutnya
              <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
              </svg>
            </a>
          )}
        </div>
      </div>
    )}
  </div>
)}

<script>
  class ArticleSeries {
    private seriesElement: HTMLElement | null = null;
    private progressBar: HTMLElement | null = null;
    private currentPostIndex: number = -1;
    private totalPosts: number = 0;

    constructor() {
      this.initializeElements();
      this.setupEventListeners();
      this.trackSeriesProgress();
    }

    private initializeElements(): void {
      this.seriesElement = document.querySelector('.article-series');
      this.progressBar = document.querySelector('.progress-fill');
      
      // Get current post index from data attributes
      const currentPost = document.querySelector('.series-post.current');
      if (currentPost) {
        this.currentPostIndex = Array.from(document.querySelectorAll('.series-post')).indexOf(currentPost);
      }
      
      this.totalPosts = document.querySelectorAll('.series-post').length;
    }

    private setupEventListeners(): void {
      // Track clicks on series posts
      document.querySelectorAll('.series-post a').forEach(link => {
        link.addEventListener('click', (e) => {
          this.trackSeriesNavigation(e.target as HTMLAnchorElement);
        });
      });

      // Track series completion
      this.trackSeriesCompletion();
    }

    private trackSeriesProgress(): void {
      if (this.currentPostIndex >= 0 && this.totalPosts > 0) {
        const progress = ((this.currentPostIndex + 1) / this.totalPosts) * 100;
        
        // Track progress milestone
        this.trackEvent('series_progress', {
          series_name: this.getSeriesName(),
          current_post: this.currentPostIndex + 1,
          total_posts: this.totalPosts,
          progress_percentage: Math.round(progress)
        });
      }
    }

    private trackSeriesNavigation(link: HTMLAnchorElement): void {
      const postTitle = link.textContent?.trim() || '';
      const postUrl = link.href;
      
      this.trackEvent('series_navigation', {
        series_name: this.getSeriesName(),
        from_post: this.currentPostIndex + 1,
        to_post: postTitle,
        navigation_type: 'click'
      });
    }

    private trackSeriesCompletion(): void {
      // Check if this is the last post in series
      if (this.currentPostIndex === this.totalPosts - 1) {
        this.trackEvent('series_completion', {
          series_name: this.getSeriesName(),
          total_posts: this.totalPosts,
          completion_time: Date.now()
        });
      }
    }

    private getSeriesName(): string {
      const seriesTitle = document.querySelector('.series-title');
      return seriesTitle?.textContent?.replace('ðŸ“š ', '') || '';
    }

    private trackEvent(eventName: string, data: any): void {
      // Send to Google Analytics if available
      if (typeof window !== 'undefined' && window.gtag) {
        window.gtag('event', eventName, {
          event_category: 'article_series',
          event_label: this.getSeriesName(),
          ...data
        });
      }

      // Send to custom analytics endpoint
      this.sendToAnalytics(eventName, data);
    }

    private async sendToAnalytics(eventName: string, data: any): Promise<void> {
      try {
        await fetch('/api/analytics', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            event: eventName,
            timestamp: new Date().toISOString(),
            data: data
          })
        });
      } catch (error) {
        console.log('Analytics endpoint not available:', error);
      }
    }
  }

  // Initialize article series when DOM is ready
  function initArticleSeries(): void {
    if (document.querySelector('.article-series')) {
      new ArticleSeries();
    }
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initArticleSeries);
  } else {
    initArticleSeries();
  }
</script>

<style>
  @reference "@/styles/global.css";
  .article-series {
    @apply bg-gradient-to-br from-primary-50 to-secondary-50 rounded-2xl p-6 shadow-lg border border-primary-200 mb-8;
  }

  .series-header {
    @apply mb-6;
  }

  .series-info {
    @apply mb-4;
  }

  .series-title {
    @apply text-xl font-bold text-primary-800 mb-2;
  }

  .series-description {
    @apply text-sm text-primary-600;
  }

  .series-progress {
    @apply space-y-2;
  }

  .progress-bar {
    @apply w-full bg-primary-200 rounded-full h-2 overflow-hidden;
  }

  .progress-fill {
    @apply bg-gradient-to-r from-primary-500 to-secondary-500 h-full transition-all duration-500 ease-out;
  }

  .progress-text {
    @apply text-sm font-medium text-primary-700;
  }

  .series-navigation {
    @apply space-y-4;
  }

  .series-posts {
    @apply space-y-3;
  }

  .series-post {
    @apply flex items-center gap-4 p-4 bg-white rounded-xl border border-primary-100 transition-all duration-200;
  }

  .series-post.current {
    @apply border-primary-300 bg-primary-50 shadow-sm;
  }

  .series-post.completed {
    @apply border-green-200 bg-green-50;
  }

  .post-number {
    @apply flex-shrink-0 w-8 h-8 bg-primary-500 text-white rounded-full flex items-center justify-center font-bold text-sm;
  }

  .series-post.completed .post-number {
    @apply bg-green-500;
  }

  .series-post.current .post-number {
    @apply bg-gradient-to-r from-primary-500 to-secondary-500;
  }

  .completed-icon {
    @apply w-4 h-4;
  }

  .post-content {
    @apply flex-1 min-w-0;
  }

  .post-title {
    @apply text-lg font-semibold mb-1;
  }

  .post-link {
    @apply text-primary-700 hover:text-primary-800 transition-colors;
  }

  .current-post {
    @apply text-primary-800 font-bold;
  }

  .post-meta {
    @apply flex items-center gap-3 text-xs text-neutral-500;
  }

  .post-category {
    @apply px-2 py-1 bg-primary-100 text-primary-700 rounded-full font-medium;
  }

  .series-controls {
    @apply flex justify-between pt-4 border-t border-primary-200;
  }

  .series-nav-btn {
    @apply flex items-center gap-2 px-4 py-2 bg-primary-500 text-white rounded-lg font-medium hover:bg-primary-600 transition-colors;
  }

  .series-nav-btn.prev {
    @apply bg-neutral-500 hover:bg-neutral-600;
  }

  .series-nav-btn svg {
    @apply w-4 h-4;
  }

  /* Dark mode styles */
  .dark .article-series {
    @apply from-primary-900 to-secondary-900 border-primary-700;
  }

  .dark .series-title {
    @apply text-primary-200;
  }

  .dark .series-description {
    @apply text-primary-300;
  }

  .dark .series-post {
    @apply bg-neutral-800 border-neutral-700;
  }

  .dark .series-post.current {
    @apply border-primary-600 bg-primary-900;
  }

  .dark .series-post.completed {
    @apply border-green-600 bg-green-900;
  }

  .dark .post-link {
    @apply text-primary-300 hover:text-primary-200;
  }

  .dark .current-post {
    @apply text-primary-100;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .article-series {
      @apply p-4;
    }
    
    .series-post {
      @apply flex-col gap-3 p-3;
    }
    
    .post-number {
      @apply w-6 h-6 text-xs;
    }
    
    .series-controls {
      @apply flex-col gap-2;
    }
    
    .series-nav-btn {
      @apply justify-center;
    }
  }

  /* Animation for progress bar */
  .progress-fill {
    transition: width 0.8s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Hover effects */
  .series-post:hover {
    @apply transform -translate-y-0.5 shadow-sm;
  }

  .series-nav-btn:hover {
    @apply transform -translate-y-0.5 shadow-sm;
  }
</style>
