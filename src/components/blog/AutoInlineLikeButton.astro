---
// Auto Inline Like Button Component - automatically places like buttons between content
export interface Props {
  postSlug?: string;
  contentSelector?: string;
  insertFrequency?: number; // Insert every N paragraphs
  position?: 'left' | 'center' | 'right';
  variant?: 'minimal' | 'card';
  showText?: boolean;
  className?: string;
}

const { 
  postSlug = 'default',
  contentSelector = '.blog-content',
  insertFrequency = 3, // Insert every 3 paragraphs
  position = 'center',
  variant = 'card',
  showText = true,
  className = ''
} = Astro.props;

const containerId = `auto-like-container-${postSlug}-${Math.random().toString(36).substr(2, 9)}`;
---

<div id={containerId} class={`auto-like-container ${className}`}>
  <!-- Like buttons will be automatically inserted here -->
</div>

<style>
  @reference "@/styles/global.css";
  .auto-like-container {
    @apply hidden; /* Hidden by default, shown when content is processed */
  }

  .auto-like-container .inline-like-container {
    @apply my-8;
  }

  .auto-like-container .inline-like-container.card {
    @apply bg-gradient-to-r from-red-50 to-pink-50 p-4 rounded-lg border border-red-100;
  }

  .auto-like-container .inline-like-container.minimal {
    @apply bg-transparent p-2;
  }

  /* Dark mode support */
  .dark .auto-like-container .inline-like-container.card {
    @apply bg-gradient-to-r from-red-900 to-pink-900 border-red-800;
  }
</style>

<script define:vars={{ containerId, contentSelector, insertFrequency, postSlug, position, variant, showText }}>
  // Auto Inline Like Button Functionality
  function initializeAutoInlineLikeButtons() {
    const container = document.getElementById(containerId);
    if (!container) return;

    const contentElement = document.querySelector(contentSelector);
    if (!contentElement) return;

    // Find all paragraphs
    const paragraphs = contentElement.querySelectorAll('p');
    if (paragraphs.length < insertFrequency) return;

    // Show container
    container.classList.remove('hidden');

    // Insert like buttons
    const likeButtons = [];
    for (let i = insertFrequency - 1; i < paragraphs.length; i += insertFrequency) {
      const paragraph = paragraphs[i];
      const likeButtonId = `auto-like-${postSlug}-${i}`;
      
      // Create like button HTML
      const likeButtonHTML = `
        <div class="inline-like-container ${position} ${variant}">
          <div class="inline-like-wrapper">
            ${showText ? `
              <div class="inline-like-text">
                <span class="inline-like-question">Suka artikel ini?</span>
              </div>
            ` : ''}
            
            <button 
              id="${likeButtonId}"
              class="inline-like-button"
              data-post-slug="${postSlug}"
              aria-label="Suka artikel ini"
            >
              <div class="inline-like-icon">
                <svg class="inline-heart-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path 
                    d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
              
              ${showText ? '<span class="inline-like-label">Like</span>' : ''}
              
              <span class="inline-like-count" data-count="0">0</span>
            </button>
            
            <div class="inline-like-feedback">
              <div class="inline-like-success">
                <svg class="inline-success-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M9 12l2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <span>Terima kasih!</span>
              </div>
            </div>
          </div>
        </div>
      `;

      // Insert after paragraph
      paragraph.insertAdjacentHTML('afterend', likeButtonHTML);
      likeButtons.push(likeButtonId);
    }

    // Initialize all like buttons
    likeButtons.forEach(buttonId => {
      initializeSingleLikeButton(buttonId);
    });

    console.log(`Auto-inserted ${likeButtons.length} like buttons in content`);
  }

  function initializeSingleLikeButton(buttonId) {
    const likeButton = document.getElementById(buttonId);
    if (!likeButton) return;

    const postSlug = likeButton.dataset.postSlug;
    const countElement = likeButton.querySelector('.inline-like-count');
    const feedbackElement = likeButton.closest('.inline-like-wrapper')?.querySelector('.inline-like-feedback');

    // Load saved state
    const savedState = localStorage.getItem(`like-${postSlug}`);
    if (savedState) {
      const { liked, count } = JSON.parse(savedState);
      if (liked) {
        likeButton.classList.add('liked');
      }
      if (countElement) {
        countElement.textContent = count.toString();
        countElement.dataset.count = count.toString();
      }
    }

    // Handle click
    likeButton.addEventListener('click', async () => {
      if (likeButton.classList.contains('liked')) return;

      // Add liked class immediately for better UX
      likeButton.classList.add('liked');
      
      // Update count
      const currentCount = parseInt(countElement?.dataset.count || '0');
      const newCount = currentCount + 1;
      
      if (countElement) {
        countElement.textContent = newCount.toString();
        countElement.dataset.count = newCount.toString();
      }

      // Save to localStorage
      localStorage.setItem(`like-${postSlug}`, JSON.stringify({
        liked: true,
        count: newCount
      }));

      // Show feedback
      if (feedbackElement) {
        feedbackElement.classList.add('show');
        setTimeout(() => {
          feedbackElement.classList.remove('show');
        }, 2000);
      }

      // Send analytics event
      if (typeof window.gtag !== 'undefined') {
        window.gtag('event', 'like_article_auto_inline', {
          'post_slug': postSlug,
          'like_count': newCount,
          'button_id': buttonId
        });
      }

      // Optional: Send to server
      try {
        await fetch('/api/like', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            postSlug: postSlug,
            action: 'like',
            position: 'auto_inline',
            buttonId: buttonId
          })
        });
      } catch (error) {
        console.log('Auto inline like tracking failed:', error);
      }
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAutoInlineLikeButtons);
  } else {
    initializeAutoInlineLikeButtons();
  }
</script>