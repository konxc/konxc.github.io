---
// Enhanced Code Block Component for Blog Content
export interface Props {
  code: string;
  language?: string;
  filename?: string;
  showLineNumbers?: boolean;
  showCopyButton?: boolean;
  className?: string;
}

const { 
  code, 
  language = 'text', 
  filename,
  showLineNumbers = true,
  showCopyButton = true,
  className = ''
} = Astro.props;

// Generate unique ID for this code block
const codeId = `code-${Math.random().toString(36).substr(2, 9)}`;

// Split code into lines for line numbers
const lines = code.split('\n');
const lineCount = lines.length;

// Language display names
const languageNames: Record<string, string> = {
  'javascript': 'JavaScript',
  'typescript': 'TypeScript',
  'python': 'Python',
  'java': 'Java',
  'cpp': 'C++',
  'c': 'C',
  'css': 'CSS',
  'html': 'HTML',
  'json': 'JSON',
  'yaml': 'YAML',
  'bash': 'Bash',
  'shell': 'Shell',
  'sql': 'SQL',
  'php': 'PHP',
  'ruby': 'Ruby',
  'go': 'Go',
  'rust': 'Rust',
  'swift': 'Swift',
  'kotlin': 'Kotlin',
  'dart': 'Dart',
  'vue': 'Vue',
  'react': 'React',
  'astro': 'Astro',
  'markdown': 'Markdown',
  'xml': 'XML',
  'text': 'Text'
};
---

<div class={`enhanced-code-block ${className}`}>
  {filename && (
    <div class="code-header">
      <div class="code-filename">
        <svg class="code-icon" viewBox="0 0 24 24" fill="currentColor">
          <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z" />
        </svg>
        <span>{filename}</span>
      </div>
      {showCopyButton && (
        <button 
          class="copy-button" 
          data-code-id={codeId}
          aria-label="Copy code to clipboard"
        >
          <svg class="copy-icon" viewBox="0 0 24 24" fill="currentColor">
            <path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" />
          </svg>
          <span class="copy-text">Copy</span>
        </button>
      )}
    </div>
  )}
  
  <div class="code-container">
    {showLineNumbers && (
      <div class="line-numbers" aria-hidden="true">
        {Array.from({ length: lineCount }, (_, i) => (
          <div class="line-number">{i + 1}</div>
        ))}
      </div>
    )}
    
    <pre class="code-content">
      <code 
        id={codeId}
        class={`language-${language}`}
        data-language={language}
      >
        {code}
      </code>
    </pre>
    
    {showCopyButton && !filename && (
      <button 
        class="copy-button-floating" 
        data-code-id={codeId}
        aria-label="Copy code to clipboard"
      >
        <svg class="copy-icon" viewBox="0 0 24 24" fill="currentColor">
          <path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z" />
        </svg>
      </button>
    )}
  </div>
  
  <div class="code-footer">
    <span class="language-label">{languageNames[language] || language}</span>
    <span class="line-count">{lineCount} lines</span>
  </div>
</div>

<style>
  @reference "@/styles/global.css";
  .enhanced-code-block {
    @apply relative bg-neutral-900 rounded-lg overflow-hidden shadow-lg mb-6;
    font-family: 'JetBrains Mono', 'Fira Code', 'Monaco', 'Consolas', monospace;
  }

  /* Code Header */
  .code-header {
    @apply flex items-center justify-between bg-neutral-800 px-4 py-3 border-b border-neutral-700;
  }

  .code-filename {
    @apply flex items-center gap-2 text-neutral-300 text-sm font-medium;
  }

  .code-icon {
    @apply w-4 h-4 text-neutral-400;
  }

  /* Copy Button */
  .copy-button {
    @apply flex items-center gap-2 px-3 py-1.5 bg-neutral-700 hover:bg-neutral-600 text-neutral-300 hover:text-white rounded-md transition-colors text-sm font-medium;
  }

  .copy-button-floating {
    @apply absolute top-4 right-4 p-2 bg-neutral-800 hover:bg-neutral-700 text-neutral-400 hover:text-white rounded-md transition-colors opacity-0 group-hover:opacity-100;
  }

  .copy-icon {
    @apply w-4 h-4;
  }

  .copy-text {
    @apply text-xs;
  }

  /* Code Container */
  .code-container {
    @apply relative flex overflow-x-auto;
  }

  /* Line Numbers */
  .line-numbers {
    @apply bg-neutral-800 text-neutral-500 text-sm select-none pr-4 py-4 border-r border-neutral-700;
    font-family: 'JetBrains Mono', 'Fira Code', 'Monaco', 'Consolas', monospace;
    min-width: 3rem;
  }

  .line-number {
    @apply leading-6 text-right;
    height: 1.5rem;
  }

  /* Code Content */
  .code-content {
    @apply flex-1 p-4 m-0 bg-transparent text-neutral-100 overflow-x-auto;
    font-family: 'JetBrains Mono', 'Fira Code', 'Monaco', 'Consolas', monospace;
    font-size: 0.875rem;
    line-height: 1.5;
  }

  .code-content code {
    @apply bg-transparent text-neutral-100 p-0;
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
  }

  /* Code Footer */
  .code-footer {
    @apply flex items-center justify-between bg-neutral-800 px-4 py-2 text-xs text-neutral-400 border-t border-neutral-700;
  }

  .language-label {
    @apply font-medium uppercase tracking-wide;
  }

  .line-count {
    @apply text-neutral-500;
  }

  /* Hover Effects */
  .enhanced-code-block:hover .copy-button-floating {
    @apply opacity-100;
  }

  /* Copy Success Animation */
  .copy-button.copied {
    @apply bg-green-600 text-white;
  }

  .copy-button-floating.copied {
    @apply bg-green-600 text-white;
  }

  /* Dark mode adjustments */
  .dark .enhanced-code-block {
    @apply bg-neutral-900;
  }

  .dark .code-header {
    @apply bg-neutral-800 border-neutral-700;
  }

  .dark .code-filename {
    @apply text-neutral-300;
  }

  .dark .copy-button {
    @apply bg-neutral-700 hover:bg-neutral-600 text-neutral-300 hover:text-white;
  }

  .dark .copy-button-floating {
    @apply bg-neutral-800 hover:bg-neutral-700 text-neutral-400 hover:text-white;
  }

  .dark .line-numbers {
    @apply bg-neutral-800 text-neutral-500 border-neutral-700;
  }

  .dark .code-content {
    @apply text-neutral-100;
  }

  .dark .code-footer {
    @apply bg-neutral-800 text-neutral-400 border-neutral-700;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .code-header {
      @apply px-3 py-2;
    }

    .code-filename {
      @apply text-xs;
    }

    .copy-button {
      @apply px-2 py-1 text-xs;
    }

    .copy-button-floating {
      @apply top-2 right-2 p-1.5;
    }

    .line-numbers {
      @apply pr-2 py-3;
      min-width: 2.5rem;
    }

    .line-number {
      @apply text-xs;
    }

    .code-content {
      @apply p-3 text-xs;
    }

    .code-footer {
      @apply px-3 py-1.5 text-xs;
    }
  }

  /* Print styles */
  @media print {
    .enhanced-code-block {
      @apply bg-white border border-neutral-300;
    }

    .code-header {
      @apply bg-neutral-100 border-neutral-300;
    }

    .code-filename {
      @apply text-neutral-700;
    }

    .copy-button,
    .copy-button-floating {
      @apply hidden;
    }

    .line-numbers {
      @apply bg-neutral-100 text-neutral-600 border-neutral-300;
    }

    .code-content {
      @apply text-neutral-900;
    }

    .code-footer {
      @apply bg-neutral-100 text-neutral-600 border-neutral-300;
    }
  }
</style>

<script>
  // Copy to clipboard functionality
  document.addEventListener('DOMContentLoaded', function() {
    const copyButtons = document.querySelectorAll('.copy-button, .copy-button-floating');
    
    copyButtons.forEach(button => {
      button.addEventListener('click', async function(this: HTMLButtonElement) {
        const codeId = this.getAttribute('data-code-id');
        const codeElement = document.getElementById(codeId || '');
        
        if (!codeElement) return;
        
        try {
          // Copy text to clipboard
          await navigator.clipboard.writeText(codeElement.textContent || '');
          
          // Show success state
          this.classList.add('copied');
          const originalText = this.querySelector('.copy-text') as HTMLElement;
          if (originalText) {
            originalText.textContent = 'Copied!';
          }
          
          // Reset after 2 seconds
          setTimeout(() => {
            this.classList.remove('copied');
            if (originalText) {
              originalText.textContent = 'Copy';
            }
          }, 2000);
          
        } catch (err) {
          console.error('Failed to copy text: ', err);
          
          // Fallback for older browsers
          const textArea = document.createElement('textarea');
          textArea.value = codeElement.textContent || '';
          document.body.appendChild(textArea);
          textArea.select();
          document.execCommand('copy');
          document.body.removeChild(textArea);
          
          // Show success state
          this.classList.add('copied');
          const originalText = this.querySelector('.copy-text') as HTMLElement;
          if (originalText) {
            originalText.textContent = 'Copied!';
          }
          
          // Reset after 2 seconds
          setTimeout(() => {
            this.classList.remove('copied');
            if (originalText) {
              originalText.textContent = 'Copy';
            }
          }, 2000);
        }
      });
    });
  });
</script>
