---
// Newsletter Section Component - Specialized for blog post pages
export interface Props {
  variant?: 'default' | 'card' | 'gradient' | 'minimal';
  size?: 'sm' | 'md' | 'lg';
  showIcon?: boolean;
  showDescription?: boolean;
  title?: string;
  description?: string;
  placeholder?: string;
  buttonText?: string;
  successMessage?: string;
  privacyText?: string;
  className?: string;
}

const { 
  variant = 'card',
  size = 'md',
  showIcon = true,
  showDescription = true,
  title = 'Suka Artikel Ini?',
  description = 'Dapatkan artikel serupa langsung di inbox Anda. Subscribe newsletter KonXC untuk tips teknologi terbaru.',
  placeholder = 'Email Anda',
  buttonText = 'Subscribe',
  successMessage = 'Terima kasih! Anda telah berhasil subscribe ke newsletter kami.',
  privacyText = 'Kami menghargai privasi Anda. Tidak ada spam, unsubscribe kapan saja.',
  className = ''
} = Astro.props;

const newsletterId = `newsletter-section-${Math.random().toString(36).substr(2, 9)}`;
---

<section class={`newsletter-section ${variant} ${size} ${className}`}>
  <div class="newsletter-section-container">
    <div class="newsletter-section-content">
      {/* Header */}
      <div class="newsletter-section-header">
        {showIcon && (
          <div class="newsletter-section-icon">
            <svg class="newsletter-section-icon-svg" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path 
                d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
              <polyline 
                points="22,6 12,13 2,6"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
              />
            </svg>
          </div>
        )}
        
        <h2 class="newsletter-section-title">{title}</h2>
        
        {showDescription && (
          <p class="newsletter-section-description">
            {description}
          </p>
        )}
      </div>

      {/* Form Container */}
      <div class="newsletter-section-form-container">
        <form class="newsletter-section-form" id={newsletterId}>
          <div class="newsletter-section-input-group">
            <input 
              type="email" 
              class="newsletter-section-input"
              placeholder={placeholder}
              required
              aria-label="Email address"
            />
            
            <button 
              type="submit" 
              class="newsletter-section-button group"
              aria-label="Subscribe to newsletter"
            >
              <span class="newsletter-section-button-text">{buttonText}</span>
              
              <div class="newsletter-section-button-icon">
                <svg class="newsletter-section-arrow-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path 
                    d="M5 12h14M12 5l7 7-7 7"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                  />
                </svg>
              </div>
            </button>
          </div>
          
          <div class="newsletter-section-privacy">
            <p class="newsletter-section-privacy-text">
              {privacyText}
            </p>
          </div>
        </form>

        {/* Success State */}
        <div class="newsletter-section-success">
          <div class="newsletter-section-success-content">
            <div class="newsletter-section-success-icon">
              <svg class="newsletter-section-check-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path 
                  d="M9 12l2 2 4-4"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"
                />
              </svg>
            </div>
            
            <div class="newsletter-section-success-text">
              <h3 class="newsletter-section-success-title">Berhasil!</h3>
              <p class="newsletter-section-success-message">{successMessage}</p>
            </div>
          </div>
        </div>

        {/* Error State */}
        <div class="newsletter-section-error">
          <div class="newsletter-section-error-content">
            <div class="newsletter-section-error-icon">
              <svg class="newsletter-section-error-svg" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
                <line x1="15" y1="9" x2="9" y2="15" stroke="currentColor" stroke-width="2"/>
                <line x1="9" y1="9" x2="15" y2="15" stroke="currentColor" stroke-width="2"/>
              </svg>
            </div>
            
            <div class="newsletter-section-error-text">
              <h3 class="newsletter-section-error-title">Oops!</h3>
              <p class="newsletter-section-error-message">Terjadi kesalahan. Silakan coba lagi.</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  @reference "@/styles/global.css";
  .newsletter-section {
    @apply py-16;
  }

  .newsletter-section-container {
    @apply max-w-2xl mx-auto px-4;
  }

  .newsletter-section-content {
    @apply text-center;
  }

  /* Header */
  .newsletter-section-header {
    @apply mb-8;
  }

  .newsletter-section-icon {
    @apply inline-flex items-center justify-center w-16 h-16 bg-primary-100 rounded-full mb-4;
  }

  .newsletter-section-icon-svg {
    @apply w-8 h-8 text-primary-600;
  }

  .newsletter-section-title {
    @apply text-3xl font-bold text-neutral-800 mb-4;
  }

  .newsletter-section-description {
    @apply text-xl text-neutral-600;
  }

  /* Form Container */
  .newsletter-section-form-container {
    @apply relative;
  }

  .newsletter-section-form {
    @apply space-y-4;
  }

  .newsletter-section-input-group {
    @apply flex flex-col gap-4 sm:flex-row;
  }

  .newsletter-section-input {
    @apply flex-1 px-4 py-3 border border-neutral-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-300;
    @apply placeholder-neutral-400;
  }

  .newsletter-section-input:focus {
    @apply shadow-lg;
  }

  .newsletter-section-button {
    @apply relative inline-flex items-center gap-2 px-6 py-3 bg-primary-600 text-white rounded-lg hover:bg-primary-700 transition-all duration-300 cursor-pointer whitespace-nowrap;
    @apply focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2;
  }

  .newsletter-section-button:hover {
    @apply shadow-lg transform -translate-y-0.5;
  }

  .newsletter-section-button:active {
    @apply transform translate-y-0;
  }

  .newsletter-section-button-text {
    @apply font-medium;
  }

  .newsletter-section-button-icon {
    @apply relative;
  }

  .newsletter-section-arrow-icon {
    @apply w-4 h-4 transition-transform duration-300;
  }

  .newsletter-section-button:hover .newsletter-section-arrow-icon {
    @apply transform translate-x-1;
  }

  /* Privacy */
  .newsletter-section-privacy {
    @apply text-center;
  }

  .newsletter-section-privacy-text {
    @apply text-sm text-neutral-500;
  }

  /* Success State */
  .newsletter-section-success {
    @apply hidden;
  }

  .newsletter-section-success.show {
    @apply block;
  }

  .newsletter-section-success-content {
    @apply flex items-center gap-4 p-6 bg-green-50 border border-green-200 rounded-lg;
  }

  .newsletter-section-success-icon {
    @apply shrink-0;
  }

  .newsletter-section-check-icon {
    @apply w-6 h-6 text-green-600;
  }

  .newsletter-section-success-text {
    @apply text-left;
  }

  .newsletter-section-success-title {
    @apply text-lg font-semibold text-green-800 mb-1;
  }

  .newsletter-section-success-message {
    @apply text-green-700;
  }

  /* Error State */
  .newsletter-section-error {
    @apply hidden;
  }

  .newsletter-section-error.show {
    @apply block;
  }

  .newsletter-section-error-content {
    @apply flex items-center gap-4 p-6 bg-red-50 border border-red-200 rounded-lg;
  }

  .newsletter-section-error-icon {
    @apply shrink-0;
  }

  .newsletter-section-error-svg {
    @apply w-6 h-6 text-red-600;
  }

  .newsletter-section-error-text {
    @apply text-left;
  }

  .newsletter-section-error-title {
    @apply text-lg font-semibold text-red-800 mb-1;
  }

  .newsletter-section-error-message {
    @apply text-red-700;
  }

  /* Variants */
  .newsletter-section.card {
    @apply bg-white;
  }

  .newsletter-section.card .newsletter-section-form-container {
    @apply rounded-2xl bg-linear-to-br from-primary-50 to-secondary-50 p-8;
  }

  .newsletter-section.gradient {
    @apply bg-linear-to-br from-primary-500 via-secondary-500 to-accent-500 text-white;
  }

  .newsletter-section.gradient .newsletter-section-title {
    @apply text-white;
  }

  .newsletter-section.gradient .newsletter-section-description {
    @apply text-primary-100;
  }

  .newsletter-section.gradient .newsletter-section-icon {
    @apply bg-white/20;
  }

  .newsletter-section.gradient .newsletter-section-icon-svg {
    @apply text-white;
  }

  .newsletter-section.gradient .newsletter-section-form-container {
    @apply bg-white/10 backdrop-blur-sm rounded-2xl p-8;
  }

  .newsletter-section.gradient .newsletter-section-input {
    @apply bg-white/20 border-white/30 text-white placeholder-white/70;
  }

  .newsletter-section.gradient .newsletter-section-input:focus {
    @apply bg-white/30 border-white;
  }

  .newsletter-section.gradient .newsletter-section-button {
    @apply bg-white text-primary-600 hover:bg-primary-50;
  }

  .newsletter-section.gradient .newsletter-section-privacy-text {
    @apply text-primary-100;
  }

  .newsletter-section.minimal {
    @apply bg-neutral-50;
  }

  .newsletter-section.minimal .newsletter-section-form-container {
    @apply bg-white border border-neutral-200 rounded-lg p-6;
  }

  /* Sizes */
  .newsletter-section.sm {
    @apply py-12;
  }

  .newsletter-section.sm .newsletter-section-title {
    @apply text-2xl;
  }

  .newsletter-section.sm .newsletter-section-description {
    @apply text-lg;
  }

  .newsletter-section.sm .newsletter-section-icon {
    @apply w-12 h-12;
  }

  .newsletter-section.sm .newsletter-section-icon-svg {
    @apply w-6 h-6;
  }

  .newsletter-section.lg {
    @apply py-20;
  }

  .newsletter-section.lg .newsletter-section-title {
    @apply text-4xl;
  }

  .newsletter-section.lg .newsletter-section-description {
    @apply text-2xl;
  }

  .newsletter-section.lg .newsletter-section-icon {
    @apply w-20 h-20;
  }

  .newsletter-section.lg .newsletter-section-icon-svg {
    @apply w-10 h-10;
  }

  .newsletter-section.lg .newsletter-section-input {
    @apply px-6 py-4 text-lg;
  }

  .newsletter-section.lg .newsletter-section-button {
    @apply px-8 py-4 text-lg;
  }

  /* Animations */
  @keyframes newsletterSectionPulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.05); }
    100% { transform: scale(1); }
  }

  .newsletter-section-button:hover {
    animation: newsletterSectionPulse 0.3s ease-in-out;
  }

  @keyframes newsletterSectionSuccess {
    0% { opacity: 0; transform: translateY(20px); }
    100% { opacity: 1; transform: translateY(0); }
  }

  .newsletter-section-success.show {
    animation: newsletterSectionSuccess 0.5s ease-out;
  }

  @keyframes newsletterSectionError {
    0% { opacity: 0; transform: translateY(20px); }
    100% { opacity: 1; transform: translateY(0); }
  }

  .newsletter-section-error.show {
    animation: newsletterSectionError 0.5s ease-out;
  }

  /* Dark mode support */
  .dark .newsletter-section-title {
    @apply text-neutral-100;
  }

  .dark .newsletter-section-description {
    @apply text-neutral-400;
  }

  .dark .newsletter-section-icon {
    @apply bg-neutral-700;
  }

  .dark .newsletter-section-icon-svg {
    @apply text-neutral-300;
  }

  .dark .newsletter-section-input {
    @apply bg-neutral-800 border-neutral-600 text-neutral-100 placeholder-neutral-400;
  }

  .dark .newsletter-section-input:focus {
    @apply border-primary-400;
  }

  .dark .newsletter-section-privacy-text {
    @apply text-neutral-400;
  }

  .dark .newsletter-section.card .newsletter-section-form-container {
    @apply bg-linear-to-br from-neutral-800 to-neutral-700;
  }

  .dark .newsletter-section.minimal {
    @apply bg-neutral-800;
  }

  .dark .newsletter-section.minimal .newsletter-section-form-container {
    @apply bg-neutral-700 border-neutral-600;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .newsletter-section {
      @apply py-12;
    }

    .newsletter-section-title {
      @apply text-2xl;
    }

    .newsletter-section-description {
      @apply text-lg;
    }

    .newsletter-section-input-group {
      @apply flex-col;
    }

    .newsletter-section-button {
      @apply w-full justify-center;
    }

    .newsletter-section-icon {
      @apply w-12 h-12;
    }

    .newsletter-section-icon-svg {
      @apply w-6 h-6;
    }

    .newsletter-section.card .newsletter-section-form-container,
    .newsletter-section.gradient .newsletter-section-form-container,
    .newsletter-section.minimal .newsletter-section-form-container {
      @apply p-6;
    }
  }
</style>

<script>
  // Newsletter Section Functionality
  function initializeNewsletterSection() {
    const form = document.getElementById('${newsletterId}');
    if (!form) return;

    const input = form.querySelector('.newsletter-section-input') as HTMLInputElement;
    const button = form.querySelector('.newsletter-section-button') as HTMLButtonElement;
    const formContainer = form.closest('.newsletter-section-form-container');
    const successDiv = formContainer?.querySelector('.newsletter-section-success') as HTMLElement;
    const errorDiv = formContainer?.querySelector('.newsletter-section-error') as HTMLElement;

    if (!input || !button || !successDiv || !errorDiv) return;

    // Handle form submission
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const email = input.value.trim();
      if (!email) return;

      // Show loading state
      button.disabled = true;
      button.innerHTML = `
        <span class="newsletter-section-button-text">Subscribing...</span>
        <div class="newsletter-section-button-icon">
          <svg class="newsletter-section-arrow-icon animate-spin" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
            <circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2" opacity="0.25"/>
            <path d="M12 2a10 10 0 0 1 10 10" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
          </svg>
        </div>
      `;

      try {
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1500));

        // Success
        form.style.display = 'none';
        successDiv.classList.add('show');

        // Send analytics event
        if (typeof (window as any).gtag !== 'undefined') {
          (window as any).gtag('event', 'newsletter_section_signup', {
            'email_domain': email.split('@')[1],
            'signup_method': 'newsletter_section',
            'variant': '${variant}'
          });
        }

        // Optional: Send to server
        try {
          await fetch('/api/newsletter/subscribe', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              email: email,
              source: 'newsletter_section',
              variant: '${variant}',
              timestamp: new Date().toISOString()
            })
          });
        } catch (error) {
          console.log('Newsletter section subscription tracking failed:', error);
        }

        // Reset form after 5 seconds
        setTimeout(() => {
          form.style.display = 'block';
          successDiv.classList.remove('show');
          input.value = '';
          button.disabled = false;
          button.innerHTML = `
            <span class="newsletter-section-button-text">Subscribe</span>
            <div class="newsletter-section-button-icon">
              <svg class="newsletter-section-arrow-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M5 12h14M12 5l7 7-7 7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
          `;
        }, 5000);

      } catch (error) {
        // Error
        form.style.display = 'none';
        errorDiv.classList.add('show');

        // Reset after 3 seconds
        setTimeout(() => {
          form.style.display = 'block';
          errorDiv.classList.remove('show');
          button.disabled = false;
          button.innerHTML = `
            <span class="newsletter-section-button-text">Subscribe</span>
            <div class="newsletter-section-button-icon">
              <svg class="newsletter-section-arrow-icon" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M5 12h14M12 5l7 7-7 7" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
          `;
        }, 3000);
      }
    });

    // Handle input validation
    input.addEventListener('input', (e) => {
      const target = e.target as HTMLInputElement;
      if (!target) return;
      
      const email = target.value.trim();
      const isValid = /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
      
      if (isValid) {
        input.classList.remove('border-red-300');
        input.classList.add('border-green-300');
      } else if (email.length > 0) {
        input.classList.remove('border-green-300');
        input.classList.add('border-red-300');
      } else {
        input.classList.remove('border-red-300', 'border-green-300');
      }
    });
  }

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeNewsletterSection);
  } else {
    initializeNewsletterSection();
  }
</script>
