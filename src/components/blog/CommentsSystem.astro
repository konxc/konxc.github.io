---
// Comments System Component
export interface Props {
  class?: string;
  postSlug?: string;
  allowReplies?: boolean;
  moderationRequired?: boolean;
  maxComments?: number;
}

const { 
  class: className, 
  postSlug = '',
  allowReplies = true,
  moderationRequired = false,
  maxComments = 50
} = Astro.props;

// Mock comments data (in production, this would come from database)
const mockComments = [
  {
    id: '1',
    author: 'Ahmad Rizki',
    email: 'ahmad@example.com',
    content: 'Artikel yang sangat informatif! Terima kasih sudah berbagi insights tentang Tailwind CSS v4.',
    timestamp: new Date('2024-01-26T10:30:00Z'),
    likes: 12,
    replies: [
      {
        id: '1-1',
        author: 'Tim KonXC',
        email: 'team@konxc.space',
        content: 'Terima kasih Ahmad! Senang artikel ini bermanfaat untuk Anda.',
        timestamp: new Date('2024-01-26T11:00:00Z'),
        likes: 3
      }
    ]
  },
  {
    id: '2',
    author: 'Sarah Putri',
    email: 'sarah@example.com',
    content: 'Saya sudah mencoba implementasi path aliases di project Astro saya. Sangat membantu untuk maintainability!',
    timestamp: new Date('2024-01-26T14:15:00Z'),
    likes: 8,
    replies: []
  }
];
---

<div class={`comments-system ${className || ''}`} data-post-slug={postSlug}>
  <div class="comments-header">
    <h3 class="comments-title">
      ðŸ’¬ Komentar ({mockComments.length})
    </h3>
    <p class="comments-subtitle">Bagikan pemikiran dan pertanyaan Anda tentang artikel ini</p>
  </div>

  <!-- Comment Form -->
  <div class="comment-form-container">
    <form class="comment-form" id="comment-form">
      <div class="form-group">
        <label for="comment-author" class="form-label">Nama *</label>
        <input 
          type="text" 
          id="comment-author" 
          name="author" 
          class="form-input" 
          placeholder="Masukkan nama Anda"
          required
        />
      </div>
      
      <div class="form-group">
        <label for="comment-email" class="form-label">Email *</label>
        <input 
          type="email" 
          id="comment-email" 
          name="email" 
          class="form-input" 
          placeholder="email@example.com"
          required
        />
      </div>
      
      <div class="form-group">
        <label for="comment-content" class="form-label">Komentar *</label>
        <textarea 
          id="comment-content" 
          name="content" 
          class="form-textarea" 
          placeholder="Tulis komentar Anda di sini..."
          rows="4"
          required
        ></textarea>
        <div class="char-counter">
          <span id="char-count">0</span>/500 karakter
        </div>
      </div>
      
      <div class="form-actions">
        <button type="submit" class="btn-primary" id="submit-comment">
          <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"/>
          </svg>
          Kirim Komentar
        </button>
        <button type="button" class="btn-secondary" id="preview-comment">
          <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"/>
          </svg>
          Preview
        </button>
      </div>
    </form>
  </div>

  <!-- Comments List -->
  <div class="comments-list" id="comments-list">
    {mockComments.map((comment) => (
      <div class="comment-item" data-comment-id={comment.id}>
        <div class="comment-header">
          <div class="comment-author">
            <div class="author-avatar">
              {comment.author.charAt(0).toUpperCase()}
            </div>
            <div class="author-info">
              <h4 class="author-name">{comment.author}</h4>
              <span class="comment-date">
                {comment.timestamp.toLocaleDateString('id-ID', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit'
                })}
              </span>
            </div>
          </div>
          
          <div class="comment-actions">
            <button class="action-btn like-btn" data-comment-id={comment.id}>
              <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
              </svg>
              <span class="like-count">{comment.likes}</span>
            </button>
            
            {allowReplies && (
              <button class="action-btn reply-btn" data-comment-id={comment.id}>
                <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 10h10a8 8 0 018 8v2M3 10l6 6m-6-6l6-6"/>
                </svg>
                Balas
              </button>
            )}
          </div>
        </div>
        
        <div class="comment-content">
          <p>{comment.content}</p>
        </div>
        
        <!-- Replies -->
        {comment.replies && comment.replies.length > 0 && (
          <div class="replies-list">
            {comment.replies.map((reply) => (
              <div class="reply-item" data-reply-id={reply.id}>
                <div class="reply-header">
                  <div class="reply-author">
                    <div class="author-avatar small">
                      {reply.author.charAt(0).toUpperCase()}
                    </div>
                    <div class="author-info">
                      <h5 class="author-name">{reply.author}</h5>
                      <span class="reply-date">
                        {reply.timestamp.toLocaleDateString('id-ID', {
                          year: 'numeric',
                          month: 'short',
                          day: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </span>
                    </div>
                  </div>
                  
                  <div class="reply-actions">
                    <button class="action-btn like-btn" data-reply-id={reply.id}>
                      <svg class="action-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"/>
                      </svg>
                      <span class="like-count">{reply.likes}</span>
                    </button>
                  </div>
                </div>
                
                <div class="reply-content">
                  <p>{reply.content}</p>
                </div>
              </div>
            ))}
          </div>
        )}
        
        <!-- Reply Form (Hidden by default) -->
        {allowReplies && (
          <div class="reply-form-container" id={`reply-form-${comment.id}`} style="display: none;">
            <form class="reply-form" data-parent-id={comment.id}>
              <div class="form-group">
                <label for={`reply-author-${comment.id}`} class="form-label">Nama *</label>
                <input 
                  type="text" 
                  id={`reply-author-${comment.id}`}
                  name="author" 
                  class="form-input" 
                  placeholder="Masukkan nama Anda"
                  required
                />
              </div>
              
              <div class="form-group">
                <label for={`reply-email-${comment.id}`} class="form-label">Email *</label>
                <input 
                  type="email" 
                  id={`reply-email-${comment.id}`}
                  name="email" 
                  class="form-input" 
                  placeholder="email@example.com"
                  required
                />
              </div>
              
              <div class="form-group">
                <label for={`reply-content-${comment.id}`} class="form-label">Balasan *</label>
                <textarea 
                  id={`reply-content-${comment.id}`}
                  name="content" 
                  class="form-textarea" 
                  placeholder="Tulis balasan Anda..."
                  rows="3"
                  required
                ></textarea>
              </div>
              
              <div class="form-actions">
                <button type="submit" class="btn-primary btn-sm">
                  Kirim Balasan
                </button>
                <button type="button" class="btn-secondary btn-sm" data-cancel-reply={comment.id}>
                  Batal
                </button>
              </div>
            </form>
          </div>
        )}
      </div>
    ))}
  </div>

  <!-- Load More Comments -->
  {mockComments.length >= maxComments && (
    <div class="comments-footer">
      <button class="btn-secondary" id="load-more-comments">
        <svg class="btn-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"/>
        </svg>
        Muat Lebih Banyak Komentar
      </button>
    </div>
  )}
</div>

<script>
  class CommentsSystem {
    private postSlug: string;
    private comments: any[] = [];
    private maxComments: number = 50;
    private allowReplies: boolean = true;
    private moderationRequired: boolean = false;

    constructor() {
      this.postSlug = this.getPostSlug();
      this.loadComments();
      this.setupEventListeners();
      this.setupFormValidation();
    }

    private getPostSlug(): string {
      const commentsElement = document.querySelector('.comments-system');
      return commentsElement?.getAttribute('data-post-slug') || 
             window.location.pathname.split('/').pop() || '';
    }

    private async loadComments(): Promise<void> {
      try {
        const response = await fetch(`/api/comments?post=${this.postSlug}`);
        if (response.ok) {
          this.comments = await response.json();
        } else {
          // Use mock data for development
          this.comments = this.getMockComments();
        }
      } catch (error) {
        console.log('Comments API not available, using mock data');
        this.comments = this.getMockComments();
      }
      
      this.renderComments();
    }

    private getMockComments(): any[] {
      // Return mock comments data
      return [
        {
          id: '1',
          author: 'Ahmad Rizki',
          email: 'ahmad@example.com',
          content: 'Artikel yang sangat informatif! Terima kasih sudah berbagi insights tentang Tailwind CSS v4.',
          timestamp: new Date('2024-01-26T10:30:00Z'),
          likes: 12,
          replies: [
            {
              id: '1-1',
              author: 'Tim KonXC',
              email: 'team@konxc.space',
              content: 'Terima kasih Ahmad! Senang artikel ini bermanfaat untuk Anda.',
              timestamp: new Date('2024-01-26T11:00:00Z'),
              likes: 3
            }
          ]
        },
        {
          id: '2',
          author: 'Sarah Putri',
          email: 'sarah@example.com',
          content: 'Saya sudah mencoba implementasi path aliases di project Astro saya. Sangat membantu untuk maintainability!',
          timestamp: new Date('2024-01-26T14:15:00Z'),
          likes: 8,
          replies: []
        }
      ];
    }

    private setupEventListeners(): void {
      // Comment form submission
      const commentForm = document.getElementById('comment-form') as HTMLFormElement;
      commentForm?.addEventListener('submit', (e) => {
        e.preventDefault();
        this.submitComment(new FormData(commentForm));
      });

      // Character counter
      const contentTextarea = document.getElementById('comment-content') as HTMLTextAreaElement;
      contentTextarea?.addEventListener('input', () => {
        this.updateCharCounter();
      });

      // Like buttons
      document.querySelectorAll('.like-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const button = target.closest('.like-btn') as HTMLButtonElement;
          this.handleLike(button);
        });
      });

      // Reply buttons
      document.querySelectorAll('.reply-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLElement;
          const button = target.closest('.reply-btn') as HTMLButtonElement;
          this.toggleReplyForm(button);
        });
      });

      // Cancel reply buttons
      document.querySelectorAll('[data-cancel-reply]').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const target = e.target as HTMLButtonElement;
          const commentId = target.getAttribute('data-cancel-reply');
          this.hideReplyForm(commentId!);
        });
      });

      // Reply form submissions
      document.querySelectorAll('.reply-form').forEach(form => {
        form.addEventListener('submit', (e) => {
          e.preventDefault();
          const target = e.target as HTMLFormElement;
          this.submitReply(new FormData(target));
        });
      });

      // Load more comments
      const loadMoreBtn = document.getElementById('load-more-comments');
      loadMoreBtn?.addEventListener('click', () => {
        this.loadMoreComments();
      });
    }

    private setupFormValidation(): void {
      const forms = document.querySelectorAll('form');
      forms.forEach(form => {
        form.addEventListener('submit', (e) => {
          if (!this.validateForm(form)) {
            e.preventDefault();
          }
        });
      });
    }

    private validateForm(form: HTMLFormElement): boolean {
      const inputs = form.querySelectorAll('input[required], textarea[required]');
      let isValid = true;

      inputs.forEach(input => {
        const element = input as HTMLInputElement | HTMLTextAreaElement;
        if (!element.value.trim()) {
          this.showFieldError(element, 'Field ini wajib diisi');
          isValid = false;
        } else {
          this.clearFieldError(element);
        }
      });

      // Email validation
      const emailInput = form.querySelector('input[type="email"]') as HTMLInputElement;
      if (emailInput && emailInput.value) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(emailInput.value)) {
          this.showFieldError(emailInput, 'Format email tidak valid');
          isValid = false;
        }
      }

      return isValid;
    }

    private showFieldError(element: HTMLElement, message: string): void {
      this.clearFieldError(element);
      const errorDiv = document.createElement('div');
      errorDiv.className = 'field-error';
      errorDiv.textContent = message;
      element.parentNode?.appendChild(errorDiv);
      element.classList.add('error');
    }

    private clearFieldError(element: HTMLElement): void {
      const existingError = element.parentNode?.querySelector('.field-error');
      if (existingError) {
        existingError.remove();
      }
      element.classList.remove('error');
    }

    private updateCharCounter(): void {
      const textarea = document.getElementById('comment-content') as HTMLTextAreaElement;
      const counter = document.getElementById('char-count');
      
      if (textarea && counter) {
        const count = textarea.value.length;
        counter.textContent = count.toString();
        
        if (count > 500) {
          counter.classList.add('over-limit');
        } else {
          counter.classList.remove('over-limit');
        }
      }
    }

    private async submitComment(formData: FormData): Promise<void> {
      const commentData = {
        postSlug: this.postSlug,
        author: formData.get('author'),
        email: formData.get('email'),
        content: formData.get('content'),
        timestamp: new Date().toISOString()
      };

      try {
        const response = await fetch('/api/comments', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(commentData)
        });

        if (response.ok) {
          this.showSuccessMessage('Komentar berhasil dikirim!');
          this.clearForm();
          this.loadComments(); // Reload comments
        } else {
          this.showErrorMessage('Gagal mengirim komentar. Silakan coba lagi.');
        }
      } catch (error) {
        console.error('Error submitting comment:', error);
        this.showErrorMessage('Terjadi kesalahan. Silakan coba lagi.');
      }
    }

    private async submitReply(formData: FormData): Promise<void> {
      const replyData = {
        postSlug: this.postSlug,
        parentId: formData.get('parentId'),
        author: formData.get('author'),
        email: formData.get('email'),
        content: formData.get('content'),
        timestamp: new Date().toISOString()
      };

      try {
        const response = await fetch('/api/comments', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(replyData)
        });

        if (response.ok) {
          this.showSuccessMessage('Balasan berhasil dikirim!');
          this.loadComments(); // Reload comments
        } else {
          this.showErrorMessage('Gagal mengirim balasan. Silakan coba lagi.');
        }
      } catch (error) {
        console.error('Error submitting reply:', error);
        this.showErrorMessage('Terjadi kesalahan. Silakan coba lagi.');
      }
    }

    private async handleLike(button: HTMLButtonElement): Promise<void> {
      const commentId = button.getAttribute('data-comment-id');
      const replyId = button.getAttribute('data-reply-id');
      const id = commentId || replyId;
      const type = commentId ? 'comment' : 'reply';

      try {
        const response = await fetch('/api/comments/like', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ id, type })
        });

        if (response.ok) {
          const result = await response.json();
          const countElement = button.querySelector('.like-count');
          if (countElement) {
            countElement.textContent = result.likes.toString();
          }
          button.classList.toggle('liked');
        }
      } catch (error) {
        console.error('Error liking comment:', error);
      }
    }

    private toggleReplyForm(button: HTMLButtonElement): void {
      const commentId = button.getAttribute('data-comment-id');
      const replyForm = document.getElementById(`reply-form-${commentId}`);
      
      if (replyForm) {
        if (replyForm.style.display === 'none') {
          replyForm.style.display = 'block';
          button.textContent = 'Batal';
        } else {
          replyForm.style.display = 'none';
          button.textContent = 'Balas';
        }
      }
    }

    private hideReplyForm(commentId: string): void {
      const replyForm = document.getElementById(`reply-form-${commentId}`);
      const replyBtn = document.querySelector(`[data-comment-id="${commentId}"] .reply-btn`);
      
      if (replyForm) {
        replyForm.style.display = 'none';
      }
      if (replyBtn) {
        replyBtn.textContent = 'Balas';
      }
    }

    private async loadMoreComments(): Promise<void> {
      // Implementation for loading more comments
      console.log('Loading more comments...');
    }

    private renderComments(): void {
      // Comments are already rendered in HTML
      // This method would be used for dynamic rendering
    }

    private clearForm(): void {
      const form = document.getElementById('comment-form') as HTMLFormElement;
      form?.reset();
      this.updateCharCounter();
    }

    private showSuccessMessage(message: string): void {
      this.showMessage(message, 'success');
    }

    private showErrorMessage(message: string): void {
      this.showMessage(message, 'error');
    }

    private showMessage(message: string, type: 'success' | 'error'): void {
      const messageDiv = document.createElement('div');
      messageDiv.className = `message message-${type}`;
      messageDiv.textContent = message;
      
      const commentsHeader = document.querySelector('.comments-header');
      commentsHeader?.parentNode?.insertBefore(messageDiv, commentsHeader?.nextSibling);
      
      setTimeout(() => {
        messageDiv.remove();
      }, 5000);
    }
  }

  // Initialize comments system when DOM is ready
  function initCommentsSystem(): void {
    new CommentsSystem();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initCommentsSystem);
  } else {
    initCommentsSystem();
  }
</script>

<style>
  @reference "@/styles/global.css";
  .comments-system {
    /* @apply bg-white rounded-2xl p-6 shadow-lg border border-neutral-100; */
  }

  .comments-header {
    @apply mb-8;
  }

  .comments-title {
    @apply text-xl md:text-2xl font-bold mb-3 tracking-tight;
    background: linear-gradient(135deg, 
      #6b5b73 0%, 
      #8b7d8b 25%, 
      #a0969f 50%, 
      #b8adb6 100%
    );
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-shadow: 0 1px 3px rgba(107, 91, 115, 0.1);
  }

  .comments-subtitle {
    @apply text-slate-600 font-medium;
    text-shadow: 0 1px 2px rgba(255, 255, 255, 0.8);
  }

  .comment-form-container {
    @apply mb-8 cream-container;
  }

  .comment-form {
    @apply space-y-4;
  }

  .form-group {
    @apply space-y-2;
  }

  .form-label {
    @apply block text-sm font-medium cream-text-primary mb-2;
  }

  .form-input,
  .form-textarea {
    @apply cream-input placeholder-elegant;
  }

  .form-textarea {
    @apply resize-none;
  }

  .char-counter {
    @apply text-xs cream-text-muted text-right font-medium;
  }

  .char-counter .over-limit {
    @apply text-red-500 font-medium;
  }

  .form-actions {
    @apply flex gap-3;
  }

  .btn-primary,
  .btn-secondary {
    @apply flex items-center gap-2 px-6 py-3 rounded-lg font-semibold transition-all duration-300;
  }

  .btn-primary {
    @apply text-white transform hover:scale-[1.02] active:scale-[0.98];
    background: linear-gradient(135deg, 
      #6b5b73 0%, 
      #8b7d8b 25%, 
      #a0969f 50%, 
      #b8adb6 75%, 
      #d1c7d0 100%
    );
    box-shadow: 
      0 4px 16px rgba(107, 91, 115, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.15),
      inset 0 -1px 0 rgba(0, 0, 0, 0.08);
  }

  .btn-primary:hover {
    background: linear-gradient(135deg, 
      #5a4a62 0%, 
      #7a6c7a 25%, 
      #8f858e 50%, 
      #a79ca5 75%, 
      #c0b5bf 100%
    );
    box-shadow: 
      0 6px 22px rgba(107, 91, 115, 0.28),
      inset 0 1px 0 rgba(255, 255, 255, 0.2),
      inset 0 -1px 0 rgba(0, 0, 0, 0.12);
  }

  .btn-secondary {
    @apply bg-stone-50 text-slate-700 border-2 hover:bg-stone-100;
    border-color: rgba(148, 163, 184, 0.2);
    box-shadow: 0 2px 8px rgba(148, 163, 184, 0.1);
  }

  .btn-sm {
    @apply px-4 py-2 text-sm;
  }

  .btn-icon {
    @apply w-4 h-4;
  }

  .comments-list {
    @apply space-y-6;
  }

  .comment-item {
    @apply p-6 rounded-xl border;
    background: linear-gradient(135deg, 
      #faf9f7 0%, 
      #f5f3f0 50%, 
      #f0ede8 100%
    );
    border-color: rgba(148, 163, 184, 0.12);
    box-shadow: 
      0 4px 12px rgba(148, 163, 184, 0.04),
      0 2px 6px rgba(148, 163, 184, 0.03),
      inset 0 1px 0 rgba(255, 255, 255, 0.8);
  }

  .comment-header {
    @apply flex items-center justify-between mb-4;
  }

  .comment-author {
    @apply flex items-center gap-3;
  }

  .author-avatar {
    @apply w-10 h-10 text-white rounded-full flex items-center justify-center font-bold;
    background: linear-gradient(135deg, 
      #6b5b73 0%, 
      #8b7d8b 50%, 
      #a0969f 100%
    );
    box-shadow: 0 2px 8px rgba(107, 91, 115, 0.2);
  }

  .author-avatar.small {
    @apply w-8 h-8 text-sm;
  }

  .author-name {
    @apply font-semibold text-slate-700;
  }

  .comment-date,
  .reply-date {
    @apply text-sm text-slate-500 font-medium;
  }

  .comment-actions {
    @apply flex items-center gap-3;
  }

  .action-btn {
    @apply flex items-center gap-1 px-3 py-1 rounded-lg text-sm font-medium transition-all duration-200 bg-stone-50 text-slate-600 hover:bg-stone-100;
    border: 1px solid rgba(148, 163, 184, 0.2);
    box-shadow: 0 1px 4px rgba(148, 163, 184, 0.1);
  }

  .action-btn.liked {
    @apply bg-red-50 text-red-600;
    border-color: rgba(239, 68, 68, 0.3);
    box-shadow: 0 1px 4px rgba(239, 68, 68, 0.1);
  }

  .action-icon {
    @apply w-4 h-4;
  }

  .comment-content,
  .reply-content {
    @apply text-slate-700 leading-relaxed font-medium;
  }

  .replies-list {
    @apply mt-4 ml-8 space-y-4;
  }

  .reply-item {
    @apply p-4 rounded-lg border;
    background: linear-gradient(135deg, 
      #faf9f7 0%, 
      #f5f3f0 100%
    );
    border-color: rgba(148, 163, 184, 0.1);
    box-shadow: 
      0 2px 8px rgba(148, 163, 184, 0.03),
      inset 0 1px 0 rgba(255, 255, 255, 0.7);
  }

  .reply-header {
    @apply flex items-center justify-between mb-3;
  }

  .reply-author {
    @apply flex items-center gap-2;
  }

  .reply-actions {
    @apply flex items-center gap-2;
  }

  .reply-form-container {
    @apply mt-4 p-4 rounded-lg border;
    background: linear-gradient(135deg, 
      #faf9f7 0%, 
      #f5f3f0 100%
    );
    border-color: rgba(148, 163, 184, 0.15);
    box-shadow: 
      0 3px 10px rgba(148, 163, 184, 0.04),
      inset 0 1px 0 rgba(255, 255, 255, 0.8);
  }

  .reply-form {
    @apply space-y-3;
  }

  .field-error {
    @apply text-sm text-red-500 mt-1;
  }

  .form-input.error,
  .form-textarea.error {
    @apply border-red-300 focus:ring-red-500;
  }

  .message {
    @apply p-4 rounded-lg font-medium;
  }

  .message-success {
    @apply bg-green-50 text-green-700 border border-green-200;
  }

  .message-error {
    @apply bg-red-50 text-red-700 border border-red-200;
  }

  .comments-footer {
    @apply text-center pt-6 border-t border-neutral-200;
  }

  /* Dark mode styles */
  .dark .comments-system {
    @apply bg-neutral-800 border-neutral-700;
  }

  .dark .comments-title {
    @apply text-neutral-100;
  }

  .dark .comments-subtitle {
    @apply text-neutral-400;
  }

  .dark .comment-form-container {
    @apply from-primary-900 to-secondary-900 border-primary-700;
  }

  .dark .form-input,
  .dark .form-textarea {
    @apply bg-neutral-700 border-neutral-600 text-neutral-100 placeholder-neutral-400;
  }

  .dark .comment-item {
    @apply bg-neutral-700 border-neutral-600;
  }

  .dark .reply-item {
    @apply bg-neutral-600 border-neutral-500;
  }

  .dark .reply-form-container {
    @apply bg-neutral-600 border-neutral-500;
  }

  /* Mobile responsive */
  @media (max-width: 768px) {
    .comments-system {
      @apply p-4;
    }
    
    .comment-form-container {
      @apply p-4;
    }
    
    .comment-header {
      @apply flex-col items-start gap-3;
    }
    
    .comment-actions {
      @apply w-full justify-start;
    }
    
    .replies-list {
      @apply ml-4;
    }
    
    .form-actions {
      @apply flex-col;
    }
  }
</style>
