---
// Universal Theme Toggle Component
// Supports both light/dark mode with system preference detection
export interface Props {
  size?: "sm" | "md" | "lg";
  variant?: "button" | "switch" | "icon";
  position?: "static" | "fixed";
  className?: string;
}

const {
  size = "md",
  variant = "button",
  position = "static",
  className = "",
} = Astro.props;

const sizeClasses = {
  sm: "w-8 h-8",
  md: "w-10 h-10",
  lg: "w-12 h-12",
};

const iconSizes = {
  sm: "w-4 h-4",
  md: "w-5 h-5",
  lg: "w-6 h-6",
};
---

<button
  class={`theme-toggle theme-toggle-${variant} ${sizeClasses[size]} ${className}`}
  data-theme-toggle
  aria-label="Toggle theme"
  title="Toggle between light and dark mode"
>
  <!-- Sun Icon (Light Mode) -->
  <svg
    class={`sun-icon ${iconSizes[size]}`}
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    aria-hidden="true"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z"
    ></path>
  </svg>

  <!-- Moon Icon (Dark Mode) -->
  <svg
    class={`moon-icon ${iconSizes[size]}`}
    fill="none"
    stroke="currentColor"
    viewBox="0 0 24 24"
    aria-hidden="true"
  >
    <path
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z"
    ></path>
  </svg>

  <!-- Optional Text for Button Variant -->
  {
    variant === "button" && (
      <span class="theme-text ml-2 text-sm font-medium">
        <span class="light-text">Dark</span>
        <span class="dark-text">Light</span>
      </span>
    )
  }
</button>

<script>
  class ThemeManager {
    private static instance: ThemeManager;
    private currentTheme: "light" | "dark" = "light";
    private toggles: NodeListOf<Element> | null = null;

    constructor() {
      this.init();
    }

    static getInstance(): ThemeManager {
      if (!ThemeManager.instance) {
        ThemeManager.instance = new ThemeManager();
      }
      return ThemeManager.instance;
    }

    private init(): void {
      this.toggles = document.querySelectorAll("[data-theme-toggle]");
      this.loadTheme();
      this.bindEvents();
      this.watchSystemTheme();
    }

    private loadTheme(): void {
      // Check localStorage first
      const savedTheme = localStorage.getItem("theme") as
        | "light"
        | "dark"
        | null;

      // Check system preference
      const systemPrefersDark = window.matchMedia(
        "(prefers-color-scheme: dark)"
      ).matches;

      // Determine theme to apply
      this.currentTheme = savedTheme || (systemPrefersDark ? "dark" : "light");

      this.applyTheme(this.currentTheme);
    }

    private applyTheme(theme: "light" | "dark"): void {
      const html = document.documentElement;

      if (theme === "dark") {
        html.classList.add("dark");
      } else {
        html.classList.remove("dark");
      }

      this.currentTheme = theme;
      this.updateToggleStates();

      // Dispatch custom event
      window.dispatchEvent(
        new CustomEvent("themeChange", {
          detail: { theme },
        })
      );
    }

    private updateToggleStates(): void {
      if (!this.toggles) return;

      this.toggles.forEach((toggle) => {
        const isDark = this.currentTheme === "dark";
        toggle.classList.toggle("theme-dark", isDark);
        toggle.setAttribute("aria-pressed", String(isDark));
      });
    }

    private bindEvents(): void {
      if (!this.toggles) return;

      this.toggles.forEach((toggle) => {
        toggle.addEventListener("click", () => this.toggle());
      });
    }

    private watchSystemTheme(): void {
      const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");

      mediaQuery.addEventListener("change", (e) => {
        // Only auto-switch if user hasn't manually set a preference
        if (!localStorage.getItem("theme")) {
          this.applyTheme(e.matches ? "dark" : "light");
        }
      });
    }

    public toggle(): void {
      const newTheme = this.currentTheme === "light" ? "dark" : "light";
      localStorage.setItem("theme", newTheme);
      this.applyTheme(newTheme);

      // Analytics tracking
      if (typeof window !== "undefined" && (window as any).gtag) {
        (window as any).gtag("event", "theme_toggle", {
          event_category: "UI",
          event_label: newTheme,
          value: 1,
        });
      }
    }

    public getTheme(): "light" | "dark" {
      return this.currentTheme;
    }

    public setTheme(theme: "light" | "dark"): void {
      localStorage.setItem("theme", theme);
      this.applyTheme(theme);
    }
  }

  // Initialize theme manager when DOM is ready
  function initThemeManager() {
    ThemeManager.getInstance();
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initThemeManager);
  } else {
    initThemeManager();
  }

  // Expose theme manager globally for other scripts
  (window as any).themeManager = ThemeManager.getInstance();
</script>

<style>
  @reference "@/styles/global.css";

  .theme-toggle {
    @apply focus:ring-primary-500 focus:border-primary-500 relative inline-flex shrink-0 items-center justify-center rounded-lg border border-neutral-300 bg-white text-neutral-700 transition-all duration-200 hover:border-neutral-400 hover:bg-neutral-50 focus:ring-2 focus:outline-none;
  }

  /* Dark mode styles for toggle */
  .dark .theme-toggle {
    @apply border-neutral-600 bg-neutral-800 text-neutral-300 hover:border-neutral-500 hover:bg-neutral-700;
  }

  /* Icon transitions */
  .sun-icon,
  .moon-icon {
    @apply absolute transition-all duration-300 ease-in-out;
  }

  .sun-icon {
    @apply scale-100 rotate-0 opacity-100;
  }

  .moon-icon {
    @apply scale-75 rotate-90 opacity-0;
  }

  /* Dark mode icon states */
  .theme-toggle.theme-dark .sun-icon {
    @apply scale-75 rotate-90 opacity-0;
  }

  .theme-toggle.theme-dark .moon-icon {
    @apply scale-100 rotate-0 opacity-100;
  }

  /* Text transitions for button variant */
  .theme-text {
    @apply relative overflow-hidden;
  }

  .light-text,
  .dark-text {
    @apply absolute inset-0 flex items-center transition-all duration-300;
  }

  .light-text {
    @apply translate-y-0 opacity-100;
  }

  .dark-text {
    @apply translate-y-full opacity-0;
  }

  .theme-toggle.theme-dark .light-text {
    @apply -translate-y-full opacity-0;
  }

  .theme-toggle.theme-dark .dark-text {
    @apply translate-y-0 opacity-100;
  }

  /* Switch variant styles */
  .theme-toggle-switch {
    @apply h-6 w-12 rounded-full bg-neutral-300 p-1;
  }

  .dark .theme-toggle-switch {
    @apply bg-neutral-600;
  }

  .theme-toggle-switch::before {
    content: "";
    @apply block h-4 w-4 rounded-full bg-white transition-transform duration-200 ease-in-out;
  }

  .theme-toggle-switch.theme-dark::before {
    @apply translate-x-6;
  }

  /* Icon variant styles */
  .theme-toggle-icon {
    @apply border-0 bg-transparent hover:bg-neutral-100 dark:hover:bg-neutral-800;
  }

  /* Fixed positioning */
  .theme-toggle[data-position="fixed"] {
    @apply fixed right-4 bottom-4 z-50 shadow-lg;
  }

  /* Smooth transitions for theme changes */
  * {
    transition:
      background-color 0.3s ease,
      color 0.3s ease,
      border-color 0.3s ease,
      box-shadow 0.3s ease;
  }

  /* Prevent flash of unstyled content */
  html:not(.dark) .dark-only {
    @apply hidden;
  }

  html.dark .light-only {
    @apply hidden;
  }
</style>
