---
// Example usage of refactored TOC component
import TableOfContentsRefactored from '@/components/blog/TableOfContentsRefactored.astro';

// Sample blog content (in real usage, this would come from markdown)
const blogContent = `
<h2>Introduction to Astro</h2>
<p>Astro is a modern static site generator...</p>

<h3>Key Features</h3>
<p>Astro offers several key features...</p>

<h4>Server-Side Rendering</h4>
<p>One of the main features is SSR...</p>

<h4>Component Islands</h4>
<p>Component islands allow for...</p>

<h3>Getting Started</h3>
<p>To get started with Astro...</p>

<h4>Installation</h4>
<p>Install Astro using npm...</p>

<h4>Project Structure</h4>
<p>Understanding the project structure...</p>

<h2>Advanced Topics</h2>
<p>Now let's explore advanced topics...</p>

<h3>Performance Optimization</h3>
<p>Performance is crucial...</p>

<h4>Image Optimization</h4>
<p>Images can be optimized...</p>

<h4>Code Splitting</h4>
<p>Code splitting helps...</p>

<h3>Deployment</h3>
<p>Deploying your Astro site...</p>

<h2>Conclusion</h2>
<p>In conclusion, Astro is...</p>
`;
---

<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width" />
  <title>Refactored TOC Example</title>
</head>
<body>
  <div class="container">
    <div class="blog-layout">
      <!-- TOC Sidebar -->
      <aside class="toc-sidebar">
        <TableOfContentsRefactored content={blogContent} />
      </aside>
      
      <!-- Main Content -->
      <main class="blog-content">
        <h1>Astro Tutorial: Complete Guide</h1>
        
        <div class="blog-content">
          <h2>Introduction to Astro</h2>
          <p>Astro is a modern static site generator that allows you to build faster websites with less client-side JavaScript. It's designed to deliver content-focused websites with optimal performance.</p>

          <h3>Key Features</h3>
          <p>Astro offers several key features that make it stand out from other static site generators:</p>

          <h4>Server-Side Rendering</h4>
          <p>One of the main features is Server-Side Rendering (SSR), which allows you to render pages on the server before sending them to the client.</p>

          <h4>Component Islands</h4>
          <p>Component islands allow for partial hydration, meaning only the interactive parts of your page are hydrated with JavaScript.</p>

          <h3>Getting Started</h3>
          <p>To get started with Astro, you'll need to understand the basic concepts and project structure.</p>

          <h4>Installation</h4>
          <p>Install Astro using npm or your preferred package manager. The installation process is straightforward and well-documented.</p>

          <h4>Project Structure</h4>
          <p>Understanding the project structure is crucial for effective development with Astro. The src/ directory contains your pages, components, and assets.</p>

          <h2>Advanced Topics</h2>
          <p>Now let's explore advanced topics that will help you build more sophisticated applications with Astro.</p>

          <h3>Performance Optimization</h3>
          <p>Performance is crucial for modern web applications. Astro provides several built-in optimizations.</p>

          <h4>Image Optimization</h4>
          <p>Images can be optimized automatically using Astro's built-in image optimization features.</p>

          <h4>Code Splitting</h4>
          <p>Code splitting helps reduce the initial bundle size by loading only the necessary code for each page.</p>

          <h3>Deployment</h3>
          <p>Deploying your Astro site is straightforward with support for various hosting platforms.</p>

          <h2>Conclusion</h2>
          <p>In conclusion, Astro is a powerful tool for building modern, performant websites. Its component islands architecture and server-side rendering capabilities make it an excellent choice for content-focused sites.</p>
        </div>
      </main>
    </div>
  </div>
</body>
</html>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .blog-layout {
    display: grid;
    grid-template-columns: 300px 1fr;
    gap: 2rem;
    align-items: start;
  }

  .toc-sidebar {
    position: sticky;
    top: 2rem;
  }

  .blog-content {
    line-height: 1.7;
  }

  .blog-content h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin-bottom: 2rem;
    color: #1f2937;
  }

  .blog-content h2 {
    font-size: 2rem;
    font-weight: 600;
    margin-top: 3rem;
    margin-bottom: 1rem;
    color: #1f2937;
    border-bottom: 2px solid #e5e7eb;
    padding-bottom: 0.5rem;
  }

  .blog-content h3 {
    font-size: 1.5rem;
    font-weight: 600;
    margin-top: 2rem;
    margin-bottom: 1rem;
    color: #374151;
  }

  .blog-content h4 {
    font-size: 1.25rem;
    font-weight: 500;
    margin-top: 1.5rem;
    margin-bottom: 0.75rem;
    color: #4b5563;
  }

  .blog-content p {
    margin-bottom: 1rem;
    color: #6b7280;
  }

  @media (max-width: 768px) {
    .blog-layout {
      grid-template-columns: 1fr;
    }
    
    .toc-sidebar {
      position: static;
      order: -1;
    }
  }
</style>
